name: PyProject Application Testing

defaults:
  run:
    working-directory: pyproject

on:
  push:
    branches: [master]
    paths:
      - 'pyproject/**'
  pull_request:
    branches: [master]
    paths:
      - 'pyproject/**'

jobs:
  # Set the job key. The key is displayed as the job name
  # when a job name is not provided
  codeql:
    # Name the Job
    name: CodeQL Analysis - Test application
    # Set the type of machine to run on
    runs-on: ubuntu-latest

    steps:
      # Checks out a copy of your repository on the ubuntu-latest machine
      - name: Checkout code
        uses: actions/checkout@v2

      - name: install poetry
        uses: Gr1N/setup-poetry@v4

      - name: install dependencies
        run: npm install
        working-directory: web

      - name: install testing imports
        run: |
          pip install redis
          pip install fastapi

      - name: run tests
        run: |
          pip install pytest
          pip install pytest-mock
          pytest ./web/test_main.py
          analyze:
            name: Analyze
            runs-on: ubuntu-latest
            permissions:
              actions: read
              contents: read
              security-events: write
        
            strategy:
              fail-fast: false
              matrix:
                language: [ 'python' ]
                # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]
                # Learn more about CodeQL language support at https://git.io/codeql-language-support
        
            steps:
            - name: Checkout repository
              uses: actions/checkout@v2
        
            # Initializes the CodeQL tools for scanning.
            - name: Initialize CodeQL
              uses: github/codeql-action/init@v1
              with:
                languages: ${{ matrix.language }}
                # If you wish to specify custom queries, you can do so here or in a config file.
                # By default, queries listed here will override any specified in a config file.
                # Prefix the list here with "+" to use these queries and those in the config file.
                # queries: ./path/to/local/query, your-org/your-repo/queries@main
        
            # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
            # If this step fails, then you should remove it and run the build manually (see below)
            - name: Autobuild
              uses: github/codeql-action/autobuild@v1
        
            # ℹ️ Command-line programs to run using the OS shell.
            # 📚 https://git.io/JvXDl
        
            # ✏️ If the Autobuild fails above, remove it and uncomment the following three lines
            #    and modify them (or add more) to build your code if your project
            #    uses a compiled language
        
            #- run: |
            #   make bootstrap
            #   make release
        
            - name: Perform CodeQL Analysis
              uses: github/codeql-action/analyze@v1
  semgrep:
    name: Semgrep Scan
    runs-on: ubuntu-latest
    # Skip any PR created by dependabot to avoid permission issues
    if: (github.actor != 'dependabot[bot]')
    steps:
      # Fetch project source
      - uses: actions/checkout@v2

      - uses: returntocorp/semgrep-action@v1
        with:
          config: >- # more at semgrep.dev/explore
            p/security-audit
            p/secrets

        # == Optional settings in the `with:` block

        # Instead of `config:`, use rules set in Semgrep App.
        # Get your token from semgrep.dev/manage/settings.
        #   publishToken: ${{ secrets.SEMGREP_APP_TOKEN }}

        # Never fail the build due to findings on pushes.
        # Instead, just collect findings for semgrep.dev/manage/findings
        #   auditOn: push

        # Upload findings to GitHub Advanced Security Dashboard [step 1/2]
        # See also the next step.
        #   generateSarif: "1"

        # Change job timeout (default is 1800 seconds; set to 0 to disable)
        # env:
        #   SEMGREP_TIMEOUT: 300

      # Upload findings to GitHub Advanced Security Dashboard [step 2/2]
      # - name: Upload SARIF file for GitHub Advanced Security Dashboard
      #   uses: github/codeql-action/upload-sarif@v1
      #   with:
      #     sarif_file: semgrep.sarif
      #   if: always()