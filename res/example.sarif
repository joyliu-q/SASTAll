{
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "runs": [
    {
      "invocations": [
        { "executionSuccessful": true, "toolExecutionNotifications": [] }
      ],
      "results": [
        {
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "flaskproject/app/static/loader.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 445,
                  "endLine": 24,
                  "startColumn": 438,
                  "startLine": 24
                }
              }
            }
          ],
          "message": {
            "text": "Detected eval(variable), which could allow a malicious actor to run arbitrary code."
          },
          "ruleId": "javascript.lang.security.detect-eval-with-expression.detect-eval-with-expression"
        },
        {
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "flaskproject/app/static/loader.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 131,
                  "endLine": 26,
                  "startColumn": 120,
                  "startLine": 26
                }
              }
            }
          ],
          "message": {
            "text": "Detected eval(variable), which could allow a malicious actor to run arbitrary code."
          },
          "ruleId": "javascript.lang.security.detect-eval-with-expression.detect-eval-with-expression"
        },
        {
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "flaskproject/app/static/loader.js",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 98,
                  "endLine": 41,
                  "startColumn": 91,
                  "startLine": 41
                }
              }
            }
          ],
          "message": {
            "text": "Detected eval(variable), which could allow a malicious actor to run arbitrary code."
          },
          "ruleId": "javascript.lang.security.detect-eval-with-expression.detect-eval-with-expression"
        },
        {
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "flaskproject/app/app.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 85,
                  "endLine": 114,
                  "startColumn": 12,
                  "startLine": 114
                }
              }
            }
          ],
          "message": {
            "text": "Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks."
          },
          "ruleId": "python.flask.security.audit.render-template-string.render-template-string"
        },
        {
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "flaskproject/app/app.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 95,
                  "endLine": 281,
                  "startColumn": 28,
                  "startLine": 281
                }
              }
            }
          ],
          "message": {
            "text": "Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks."
          },
          "ruleId": "python.flask.security.audit.render-template-string.render-template-string"
        },
        {
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "flaskproject/app/app.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 89,
                  "endLine": 114,
                  "startColumn": 5,
                  "startLine": 103
                }
              }
            }
          ],
          "message": {
            "text": "Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks."
          },
          "ruleId": "python.flask.security.dangerous-template-string.dangerous-template-string"
        },
        {
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "flaskproject/app/app.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 100,
                  "endLine": 281,
                  "startColumn": 21,
                  "startLine": 271
                }
              }
            }
          ],
          "message": {
            "text": "Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks."
          },
          "ruleId": "python.flask.security.dangerous-template-string.dangerous-template-string"
        },
        {
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "flaskproject/app/app.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 29,
                  "endLine": 329,
                  "startColumn": 17,
                  "startLine": 329
                }
              }
            }
          ],
          "message": {
            "text": "Detected the use of an insecure deserialization library in a Flask route. These libraries are prone to code execution vulnerabilities. Ensure user data does not enter this function. To fix this, try to avoid serializing whole objects. Consider instead using a serializer such as JSON."
          },
          "ruleId": "python.flask.security.insecure-deserialization.insecure-deserialization"
        },
        {
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "flaskproject/app/app.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 29,
                  "endLine": 329,
                  "startColumn": 17,
                  "startLine": 329
                }
              }
            }
          ],
          "message": {
            "text": "Avoid using `load()`. `PyYAML.load` can create arbitrary Python objects. A malicious actor could exploit this to run arbitrary code. Use `safe_load()` instead."
          },
          "ruleId": "python.lang.security.deserialization.avoid-pyyaml-load.avoid-pyyaml-load"
        },
        {
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "flaskproject/app/app.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 46,
                  "endLine": 141,
                  "startColumn": 25,
                  "startLine": 141
                }
              }
            }
          ],
          "message": {
            "text": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead."
          },
          "ruleId": "python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-md5"
        },
        {
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "flaskproject/tests/e2e_zap.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 69,
                  "endLine": 18,
                  "startColumn": 9,
                  "startLine": 17
                }
              }
            }
          ],
          "message": {
            "text": "Certificate verification has been explicitly disabled. This permits insecure connections to insecure servers. Re-enable certification validation."
          },
          "ruleId": "python.requests.security.disabled-cert-validation.disabled-cert-validation"
        },
        {
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "flaskproject/tests/e2e_zap.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 83,
                  "endLine": 29,
                  "startColumn": 19,
                  "startLine": 28
                }
              }
            }
          ],
          "message": {
            "text": "Certificate verification has been explicitly disabled. This permits insecure connections to insecure servers. Re-enable certification validation."
          },
          "ruleId": "python.requests.security.disabled-cert-validation.disabled-cert-validation"
        },
        {
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "flaskproject/tests/e2e_zap.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 103,
                  "endLine": 37,
                  "startColumn": 27,
                  "startLine": 36
                }
              }
            }
          ],
          "message": {
            "text": "Certificate verification has been explicitly disabled. This permits insecure connections to insecure servers. Re-enable certification validation."
          },
          "ruleId": "python.requests.security.disabled-cert-validation.disabled-cert-validation"
        },
        {
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "flaskproject/tests/e2e_zap.py",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 97,
                  "endLine": 45,
                  "startColumn": 32,
                  "startLine": 44
                }
              }
            }
          ],
          "message": {
            "text": "Certificate verification has been explicitly disabled. This permits insecure connections to insecure servers. Re-enable certification validation."
          },
          "ruleId": "python.requests.security.disabled-cert-validation.disabled-cert-validation"
        },
        {
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "flaskproject/app/templates/index.html",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "endColumn": 41,
                  "endLine": 12,
                  "startColumn": 20,
                  "startLine": 12
                }
              }
            }
          ],
          "message": {
            "text": "Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. If using Flask, use 'url_for()' to safely generate a URL. If using Django, use the 'url' filter to safely generate a URL. If using Mustache, use a URL encoding library, or prepend a slash '/' to the variable for relative links (`href=\"/{{link}}\"`). You may also consider setting the Content Security Policy (CSP) header."
          },
          "ruleId": "generic.html-templates.security.var-in-href.var-in-href"
        }
      ],
      "tool": {
        "driver": {
          "name": "semgrep",
          "rules": [
            {
              "defaultConfiguration": { "level": "error" },
              "fullDescription": {
                "text": "Password is exposed through JWT token payload. This is not encrypted and the password could be compromised. Do not store passwords in JWT tokens."
              },
              "helpUri": "https://semgrep.dev/r/javascript.jose.security.jwt-exposed-credentials.jwt-exposed-credentials",
              "id": "javascript.jose.security.jwt-exposed-credentials.jwt-exposed-credentials",
              "name": "javascript.jose.security.jwt-exposed-credentials.jwt-exposed-credentials",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-522: Insufficiently Protected Credentials",
                  "OWASP-A2: Broken Authentication"
                ]
              },
              "shortDescription": {
                "text": "Password is exposed through JWT token payload. This is not encrypted and the password could be compromised. Do not store passwords in JWT tokens."
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "Setting 'WTF_CSRF_ENABLED' to 'False' explicitly disables CSRF protection."
              },
              "helpUri": "https://semgrep.dev/r/python.flask.security.audit.wtf-csrf-disabled.flask-wtf-csrf-disabled",
              "id": "python.flask.security.audit.wtf-csrf-disabled.flask-wtf-csrf-disabled",
              "name": "python.flask.security.audit.wtf-csrf-disabled.flask-wtf-csrf-disabled",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-352: Cross-Site Request Forgery (CSRF)",
                  "OWASP-A6: Security Misconfiguration"
                ]
              },
              "shortDescription": {
                "text": "Setting 'WTF_CSRF_ENABLED' to 'False' explicitly disables CSRF protection."
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "Found user data in a call to 'exec'. This is extremely dangerous because it can enable an attacker to execute remote code. See https://owasp.org/www-community/attacks/Code_Injection for more information."
              },
              "helpUri": "https://semgrep.dev/r/python.django.security.injection.code.user-exec.user-exec",
              "id": "python.django.security.injection.code.user-exec.user-exec",
              "name": "python.django.security.injection.code.user-exec.user-exec",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')",
                  "OWASP-A1: Injection"
                ]
              },
              "shortDescription": {
                "text": "Found user data in a call to 'exec'. This is extremely dangerous because it can enable an attacker to execute remote code. See https://owasp.org/www-community/attacks/Code_Injection for more information."
              }
            },
            {
              "defaultConfiguration": { "level": "error" },
              "fullDescription": {
                "text": "Hardcoded variable `SECRET_KEY` detected. Use environment variables or config files instead"
              },
              "helpUri": "https://semgrep.dev/r/python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_SECRET_KEY",
              "id": "python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_SECRET_KEY",
              "name": "python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_SECRET_KEY",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-798: Use of Hard-coded Credentials",
                  "OWASP-A2: Broken Authentication"
                ]
              },
              "shortDescription": {
                "text": "Hardcoded variable `SECRET_KEY` detected. Use environment variables or config files instead"
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "Password can be leaked if CSS injection exists on the page."
              },
              "helpUri": "https://semgrep.dev/r/typescript.react.security.react-controlled-component-password.react-controlled-component-password",
              "id": "typescript.react.security.react-controlled-component-password.react-controlled-component-password",
              "name": "typescript.react.security.react-controlled-component-password.react-controlled-component-password",
              "properties": { "precision": "very-high", "tags": [] },
              "shortDescription": {
                "text": "Password can be leaked if CSS injection exists on the page."
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function"
              },
              "helpUri": "https://semgrep.dev/r/python.flask.security.audit.app-run-security-config.avoid_using_app_run_directly",
              "id": "python.flask.security.audit.app-run-security-config.avoid_using_app_run_directly",
              "name": "python.flask.security.audit.app-run-security-config.avoid_using_app_run_directly",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-668: Exposure of Resource to Wrong Sphere",
                  "OWASP-A6: Security Misconfiguration"
                ]
              },
              "shortDescription": {
                "text": "top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function"
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "Avoid using `dill`, which uses `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-dill",
              "id": "python.lang.security.deserialization.pickle.avoid-dill",
              "name": "python.lang.security.deserialization.pickle.avoid-dill",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-502: Deserialization of Untrusted Data",
                  "OWASP-A8: Insecure Deserialization"
                ]
              },
              "shortDescription": {
                "text": "Avoid using `dill`, which uses `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
              },
              "helpUri": "https://semgrep.dev/r/python.flask.security.audit.debug-enabled.debug-enabled",
              "id": "python.flask.security.audit.debug-enabled.debug-enabled",
              "name": "python.flask.security.audit.debug-enabled.debug-enabled",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-489: Active Debug Code",
                  "OWASP-A6: Security Misconfiguration"
                ]
              },
              "shortDescription": {
                "text": "Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables."
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "Detected MD4 hash algorithm which is considered insecure. This algorithm has many known vulnerabilities and has been deprecated. Use SHA256 or SHA3 instead."
              },
              "helpUri": "https://semgrep.dev/r/python.pycryptodome.security.insecure-hash-algorithm.insecure-hash-algorithm-md4",
              "id": "python.pycryptodome.security.insecure-hash-algorithm.insecure-hash-algorithm-md4",
              "name": "python.pycryptodome.security.insecure-hash-algorithm.insecure-hash-algorithm-md4",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
                  "OWASP-A3: Sensitive Data Exposure"
                ]
              },
              "shortDescription": {
                "text": "Detected MD4 hash algorithm which is considered insecure. This algorithm has many known vulnerabilities and has been deprecated. Use SHA256 or SHA3 instead."
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "Mass assignment detected. This can result in assignment to model fields that are unintended and can be exploited by an attacker. Instead of using '**request.$W', assign each field you want to edit individually to prevent mass assignment. You can read more about mass assignment at https://cheatsheetseries.owasp.org/cheatsheets/Mass_Assignment_Cheat_Sheet.html."
              },
              "helpUri": "https://semgrep.dev/r/python.django.security.injection.mass-assignment.mass-assignment",
              "id": "python.django.security.injection.mass-assignment.mass-assignment",
              "name": "python.django.security.injection.mass-assignment.mass-assignment",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes",
                  "OWASP-A1: Injection"
                ]
              },
              "shortDescription": {
                "text": "Mass assignment detected. This can result in assignment to model fields that are unintended and can be exploited by an attacker. Instead of using '**request.$W', assign each field you want to edit individually to prevent mass assignment. You can read more about mass assignment at https://cheatsheetseries.owasp.org/cheatsheets/Mass_Assignment_Cheat_Sheet.html."
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "The Connection.recv() method automatically unpickles the data it receives, which can be a security risk unless you can trust the process which sent the message. Therefore, unless the connection object was produced using Pipe() you should only use the recv() and send() methods after performing some sort of authentication. See more dettails: https://docs.python.org/3/library/multiprocessing.html?highlight=security#multiprocessing.connection.Connection"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.conn_recv.multiprocessing-recv",
              "id": "python.lang.security.audit.conn_recv.multiprocessing-recv",
              "name": "python.lang.security.audit.conn_recv.multiprocessing-recv",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-502: Deserialization of Untrusted Data",
                  "OWASP-A8: Insecure Deserialization"
                ]
              },
              "shortDescription": {
                "text": "The Connection.recv() method automatically unpickles the data it receives, which can be a security risk unless you can trust the process which sent the message. Therefore, unless the connection object was produced using Pipe() you should only use the recv() and send() methods after performing some sort of authentication. See more dettails: https://docs.python.org/3/library/multiprocessing.html?highlight=security#multiprocessing.connection.Connection"
              }
            },
            {
              "defaultConfiguration": { "level": "error" },
              "fullDescription": {
                "text": "Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'."
              },
              "helpUri": "https://semgrep.dev/r/javascript.jsonwebtoken.security.jwt-none-alg.jwt-none-alg",
              "id": "javascript.jsonwebtoken.security.jwt-none-alg.jwt-none-alg",
              "name": "javascript.jsonwebtoken.security.jwt-none-alg.jwt-none-alg",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
                  "OWASP-A2: Broken Authentication"
                ]
              },
              "shortDescription": {
                "text": "Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'."
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "Detected non-literal calls to $EXEC(). This could lead to a command injection vulnerability."
              },
              "helpUri": "https://semgrep.dev/r/javascript.lang.security.detect-child-process.detect-child-process",
              "id": "javascript.lang.security.detect-child-process.detect-child-process",
              "name": "javascript.lang.security.detect-child-process.detect-child-process",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
                  "OWASP-A1: Injection"
                ]
              },
              "shortDescription": {
                "text": "Detected non-literal calls to $EXEC(). This could lead to a command injection vulnerability."
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "Cannot determine what '$UNK' is and it is used with a '<script>' tag. This could be susceptible to cross-site scripting (XSS). Ensure '$UNK' is not externally controlled, or sanitize this data."
              },
              "helpUri": "https://semgrep.dev/r/javascript.lang.security.audit.unknown-value-with-script-tag.unknown-value-with-script-tag",
              "id": "javascript.lang.security.audit.unknown-value-with-script-tag.unknown-value-with-script-tag",
              "name": "javascript.lang.security.audit.unknown-value-with-script-tag.unknown-value-with-script-tag",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
                  "OWASP-A7: Cross-Site Scripting (XSS)"
                ]
              },
              "shortDescription": {
                "text": "Cannot determine what '$UNK' is and it is used with a '<script>' tag. This could be susceptible to cross-site scripting (XSS). Ensure '$UNK' is not externally controlled, or sanitize this data."
              }
            },
            {
              "defaultConfiguration": { "level": "error" },
              "fullDescription": {
                "text": "Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'."
              },
              "helpUri": "https://semgrep.dev/r/javascript.jose.security.jwt-none-alg.jwt-none-alg",
              "id": "javascript.jose.security.jwt-none-alg.jwt-none-alg",
              "name": "javascript.jose.security.jwt-none-alg.jwt-none-alg",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
                  "OWASP-A2: Broken Authentication"
                ]
              },
              "shortDescription": {
                "text": "Detected use of the 'none' algorithm in a JWT token. The 'none' algorithm assumes the integrity of the token has already been verified. This would allow a malicious actor to forge a JWT token that will automatically be verified. Do not explicitly use the 'none' algorithm. Instead, use an algorithm such as 'HS256'."
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "Detected eval(variable), which could allow a malicious actor to run arbitrary code."
              },
              "helpUri": "https://semgrep.dev/r/javascript.lang.security.detect-eval-with-expression.detect-eval-with-expression",
              "id": "javascript.lang.security.detect-eval-with-expression.detect-eval-with-expression",
              "name": "javascript.lang.security.detect-eval-with-expression.detect-eval-with-expression",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')",
                  "OWASP-A1: Injection"
                ]
              },
              "shortDescription": {
                "text": "Detected eval(variable), which could allow a malicious actor to run arbitrary code."
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "Detected DES cipher algorithm which is considered insecure. The algorithm is considered weak and has been deprecated. Use AES instead."
              },
              "helpUri": "https://semgrep.dev/r/python.pycryptodome.security.insecure-cipher-algorithm.insecure-cipher-algorithm-des",
              "id": "python.pycryptodome.security.insecure-cipher-algorithm.insecure-cipher-algorithm-des",
              "name": "python.pycryptodome.security.insecure-cipher-algorithm.insecure-cipher-algorithm-des",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
                  "OWASP-A3: Sensitive Data Exposure"
                ]
              },
              "shortDescription": {
                "text": "Detected DES cipher algorithm which is considered insecure. The algorithm is considered weak and has been deprecated. Use AES instead."
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "This HTML element '$EL' and attribute '$ATTR' together may load an external resource. This means that if dynamic content can enter this attribute it may be possible for an attacker to send HTTP requests to unintended locations which may leak data about your users. If this element is reaching out to a known host, consider hardcoding the host (or loading from a configuration) and appending the dynamic path. See https://github.com/cure53/HTTPLeaks for more information."
              },
              "helpUri": "https://semgrep.dev/r/typescript.react.security.audit.react-http-leak.react-http-leak",
              "id": "typescript.react.security.audit.react-http-leak.react-http-leak",
              "name": "typescript.react.security.audit.react-http-leak.react-http-leak",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-200: Exposure of Sensitive Information to an Unauthorized Actor",
                  "OWASP-A3: Sensitive Data Exposure"
                ]
              },
              "shortDescription": {
                "text": "This HTML element '$EL' and attribute '$ATTR' together may load an external resource. This means that if dynamic content can enter this attribute it may be possible for an attacker to send HTTP requests to unintended locations which may leak data about your users. If this element is reaching out to a known host, consider hardcoding the host (or loading from a configuration) and appending the dynamic path. See https://github.com/cure53/HTTPLeaks for more information."
              }
            },
            {
              "defaultConfiguration": { "level": "error" },
              "fullDescription": {
                "text": "The last user in the container is 'root'. This is a security hazard because if an attacker gains control of the container they will have root access. Switch back to another user after running commands as 'root'."
              },
              "helpUri": "https://semgrep.dev/r/generic.dockerfile.security.last-user-is-root.last-user-is-root",
              "id": "generic.dockerfile.security.last-user-is-root.last-user-is-root",
              "name": "generic.dockerfile.security.last-user-is-root.last-user-is-root",
              "properties": { "precision": "very-high", "tags": [] },
              "shortDescription": {
                "text": "The last user in the container is 'root'. This is a security hazard because if an attacker gains control of the container they will have root access. Switch back to another user after running commands as 'root'."
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead."
              },
              "helpUri": "https://semgrep.dev/r/python.cryptography.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1",
              "id": "python.cryptography.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1",
              "name": "python.cryptography.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
                  "OWASP-A3: Sensitive Data Exposure"
                ]
              },
              "shortDescription": {
                "text": "Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead."
              }
            },
            {
              "defaultConfiguration": { "level": "error" },
              "fullDescription": {
                "text": "Found an unquoted CSV writer. This is susceptible to injection. Use 'quoting=csv.QUOTE_ALL'."
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.unquoted-csv-writer.unquoted-csv-writer",
              "id": "python.lang.security.unquoted-csv-writer.unquoted-csv-writer",
              "name": "python.lang.security.unquoted-csv-writer.unquoted-csv-writer",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-1236: Improper Neutralization of Formula Elements in a CSV File",
                  "OWASP-A1: Injection"
                ]
              },
              "shortDescription": {
                "text": "Found an unquoted CSV writer. This is susceptible to injection. Use 'quoting=csv.QUOTE_ALL'."
              }
            },
            {
              "defaultConfiguration": { "level": "error" },
              "fullDescription": {
                "text": "Git allows shell commands to be specified in ext URLs for remote repositories. For example, git clone 'ext::sh -c whoami% >&2' will execute the whoami command to try to connect to a remote repository. Make sure that the URL is not controlled by external input."
              },
              "helpUri": "https://semgrep.dev/r/javascript.lang.security.spawn-git-clone.spawn-git-clone",
              "id": "javascript.lang.security.spawn-git-clone.spawn-git-clone",
              "name": "javascript.lang.security.spawn-git-clone.spawn-git-clone",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
                  "OWASP-A1: Injection"
                ]
              },
              "shortDescription": {
                "text": "Git allows shell commands to be specified in ext URLs for remote repositories. For example, git clone 'ext::sh -c whoami% >&2' will execute the whoami command to try to connect to a remote repository. Make sure that the URL is not controlled by external input."
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "Detected IDEA cipher algorithm which is considered insecure. The algorithm is considered weak and has been deprecated. Use AES instead."
              },
              "helpUri": "https://semgrep.dev/r/python.cryptography.security.insecure-cipher-algorithms.insecure-cipher-algorithm-idea",
              "id": "python.cryptography.security.insecure-cipher-algorithms.insecure-cipher-algorithm-idea",
              "name": "python.cryptography.security.insecure-cipher-algorithms.insecure-cipher-algorithm-idea",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
                  "OWASP-A3: Sensitive Data Exposure"
                ]
              },
              "shortDescription": {
                "text": "Detected IDEA cipher algorithm which is considered insecure. The algorithm is considered weak and has been deprecated. Use AES instead."
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "The password on '$MODEL' is being set without validating the password. Call django.contrib.auth.password_validation.validate_password() with validation functions before setting the password. See https://docs.djangoproject.com/en/3.0/topics/auth/passwords/ for more information."
              },
              "helpUri": "https://semgrep.dev/r/python.django.security.audit.unvalidated-password.unvalidated-password",
              "id": "python.django.security.audit.unvalidated-password.unvalidated-password",
              "name": "python.django.security.audit.unvalidated-password.unvalidated-password",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-521: Weak Password Requirements",
                  "OWASP-A2: Broken Authentication"
                ]
              },
              "shortDescription": {
                "text": "The password on '$MODEL' is being set without validating the password. Call django.contrib.auth.password_validation.validate_password() with validation functions before setting the password. See https://docs.djangoproject.com/en/3.0/topics/auth/passwords/ for more information."
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "Looks like `filename` could flow to `flask.send_file()` function. Make sure to properly sanitize filename or use `flask.send_from_directory`"
              },
              "helpUri": "https://semgrep.dev/r/python.flask.security.secure-static-file-serve.avoid_send_file_without_path_sanitization",
              "id": "python.flask.security.secure-static-file-serve.avoid_send_file_without_path_sanitization",
              "name": "python.flask.security.secure-static-file-serve.avoid_send_file_without_path_sanitization",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-73: External Control of File Name or Path",
                  "OWASP-A1: Injection"
                ]
              },
              "shortDescription": {
                "text": "Looks like `filename` could flow to `flask.send_file()` function. Make sure to properly sanitize filename or use `flask.send_from_directory`"
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "Hardcoded AWS access token detected. Use environment variables to access tokens (e.g., os.environ.get(...)) or use non version-controlled configuration files."
              },
              "helpUri": "https://semgrep.dev/r/python.boto3.security.hardcoded-token.hardcoded-token",
              "id": "python.boto3.security.hardcoded-token.hardcoded-token",
              "name": "python.boto3.security.hardcoded-token.hardcoded-token",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-798: Use of Hard-coded Credentials",
                  "OWASP-A2: Broken Authentication"
                ]
              },
              "shortDescription": {
                "text": "Hardcoded AWS access token detected. Use environment variables to access tokens (e.g., os.environ.get(...)) or use non version-controlled configuration files."
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "Found dynamic content when spawning a process. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Ensure no external data reaches here."
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.dangerous-spawn-process.dangerous-spawn-process",
              "id": "python.lang.security.audit.dangerous-spawn-process.dangerous-spawn-process",
              "name": "python.lang.security.audit.dangerous-spawn-process.dangerous-spawn-process",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
                  "OWASP-A1: Injection"
                ]
              },
              "shortDescription": {
                "text": "Found dynamic content when spawning a process. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Ensure no external data reaches here."
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "Detected use of express.csrf() middleware before express.methodOverride(). This can allow GET requests (which are not checked by csrf) to turn into POST requests later."
              },
              "helpUri": "https://semgrep.dev/r/javascript.lang.security.detect-no-csrf-before-method-override.detect-no-csrf-before-method-override",
              "id": "javascript.lang.security.detect-no-csrf-before-method-override.detect-no-csrf-before-method-override",
              "name": "javascript.lang.security.detect-no-csrf-before-method-override.detect-no-csrf-before-method-override",
              "properties": {
                "precision": "very-high",
                "tags": ["CWE-352: Cross-Site Request Forgery (CSRF)"]
              },
              "shortDescription": {
                "text": "Detected use of express.csrf() middleware before express.methodOverride(). This can allow GET requests (which are not checked by csrf) to turn into POST requests later."
              }
            },
            {
              "defaultConfiguration": { "level": "error" },
              "fullDescription": {
                "text": "Data from request is passed to redirect(). This is an open redirect and could be exploited. Consider using 'url_for()' to generate links to known locations. If you must use a URL to unknown pages, consider using 'urlparse()' or similar and checking if the 'netloc' property is the same as your site's host name. See the references for more information."
              },
              "helpUri": "https://semgrep.dev/r/python.flask.security.open-redirect.open-redirect",
              "id": "python.flask.security.open-redirect.open-redirect",
              "name": "python.flask.security.open-redirect.open-redirect",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-601: URL Redirection to Untrusted Site ('Open Redirect')",
                  "OWASP-A1: Injection"
                ]
              },
              "shortDescription": {
                "text": "Data from request is passed to redirect(). This is an open redirect and could be exploited. Consider using 'url_for()' to generate links to known locations. If you must use a URL to unknown pages, consider using 'urlparse()' or similar and checking if the 'netloc' property is the same as your site's host name. See the references for more information."
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "Flask does not automatically escape Jinja templates unless they have .html, .htm, .xml, or .xhtml extensions. This could lead to XSS attacks. Use .html, .htm, .xml, or .xhtml for your template extensions. See https://flask.palletsprojects.com/en/1.1.x/templating/#jinja-setup for more information."
              },
              "helpUri": "https://semgrep.dev/r/python.flask.security.unescaped-template-extension.unescaped-template-extension",
              "id": "python.flask.security.unescaped-template-extension.unescaped-template-extension",
              "name": "python.flask.security.unescaped-template-extension.unescaped-template-extension",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
                  "OWASP-A7: Cross-Site Scripting (XSS)"
                ]
              },
              "shortDescription": {
                "text": "Flask does not automatically escape Jinja templates unless they have .html, .htm, .xml, or .xhtml extensions. This could lead to XSS attacks. Use .html, .htm, .xml, or .xhtml for your template extensions. See https://flask.palletsprojects.com/en/1.1.x/templating/#jinja-setup for more information."
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "Setting HTML from code is risky because it\u2019s easy to inadvertently expose your users to a cross-site scripting (XSS) attack."
              },
              "helpUri": "https://semgrep.dev/r/typescript.react.security.audit.react-dangerouslysetinnerhtml.react-dangerouslysetinnerhtml",
              "id": "typescript.react.security.audit.react-dangerouslysetinnerhtml.react-dangerouslysetinnerhtml",
              "name": "typescript.react.security.audit.react-dangerouslysetinnerhtml.react-dangerouslysetinnerhtml",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
                  "OWASP-A7: Cross-Site Scripting (XSS)"
                ]
              },
              "shortDescription": {
                "text": "Setting HTML from code is risky because it\u2019s easy to inadvertently expose your users to a cross-site scripting (XSS) attack."
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "Distinct, Having, Group_by, Order_by, and Filter in SQLAlchemy can cause sql injections if the developer inputs raw SQL into the before-mentioned clauses. This pattern captures relevant cases in which the developer inputs raw SQL into the distinct, having, group_by, order_by or filter clauses and injects user-input into the raw SQL with any function besides \"bindparams\". Use bindParams to securely bind user-input to SQL statements."
              },
              "helpUri": "https://semgrep.dev/r/python.sqlalchemy.security.sqlalchemy-sql-injection.sqlalchemy-sql-injection",
              "id": "python.sqlalchemy.security.sqlalchemy-sql-injection.sqlalchemy-sql-injection",
              "name": "python.sqlalchemy.security.sqlalchemy-sql-injection.sqlalchemy-sql-injection",
              "properties": { "precision": "very-high", "tags": [] },
              "shortDescription": {
                "text": "Distinct, Having, Group_by, Order_by, and Filter in SQLAlchemy can cause sql injections if the developer inputs raw SQL into the before-mentioned clauses. This pattern captures relevant cases in which the developer inputs raw SQL into the distinct, having, group_by, order_by or filter clauses and injects user-input into the raw SQL with any function besides \"bindparams\". Use bindParams to securely bind user-input to SQL statements."
              }
            },
            {
              "defaultConfiguration": { "level": "note" },
              "fullDescription": {
                "text": "Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text."
              },
              "helpUri": "https://semgrep.dev/r/python.django.security.audit.xss.template-translate-no-escape.template-translate-no-escape",
              "id": "python.django.security.audit.xss.template-translate-no-escape.template-translate-no-escape",
              "name": "python.django.security.audit.xss.template-translate-no-escape.template-translate-no-escape",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
                  "OWASP-A7: Cross-Site Scripting (XSS)"
                ]
              },
              "shortDescription": {
                "text": "Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text."
              }
            },
            {
              "defaultConfiguration": { "level": "error" },
              "fullDescription": {
                "text": "Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks."
              },
              "helpUri": "https://semgrep.dev/r/python.flask.security.dangerous-template-string.dangerous-template-string",
              "id": "python.flask.security.dangerous-template-string.dangerous-template-string",
              "name": "python.flask.security.dangerous-template-string.dangerous-template-string",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')",
                  "OWASP-A1: Injection"
                ]
              },
              "shortDescription": {
                "text": "Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks."
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "Hardcoded variable `DEBUG` detected. Set this by using FLASK_DEBUG environment variable"
              },
              "helpUri": "https://semgrep.dev/r/python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_DEBUG",
              "id": "python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_DEBUG",
              "name": "python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_DEBUG",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-489: Active Debug Code",
                  "OWASP-A6: Security Misconfiguration"
                ]
              },
              "shortDescription": {
                "text": "Hardcoded variable `DEBUG` detected. Set this by using FLASK_DEBUG environment variable"
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "Request data detected in os.system. This could be vulnerable to a command injection and should be avoided. If this must be done, use the 'subprocess' module instead and pass the arguments as a list. See https://owasp.org/www-community/attacks/Command_Injection for more information."
              },
              "helpUri": "https://semgrep.dev/r/python.django.security.injection.command.command-injection-os-system.command-injection-os-system",
              "id": "python.django.security.injection.command.command-injection-os-system.command-injection-os-system",
              "name": "python.django.security.injection.command.command-injection-os-system.command-injection-os-system",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
                  "OWASP-A1: Injection"
                ]
              },
              "shortDescription": {
                "text": "Request data detected in os.system. This could be vulnerable to a command injection and should be avoided. If this must be done, use the 'subprocess' module instead and pass the arguments as a list. See https://owasp.org/www-community/attacks/Command_Injection for more information."
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "This anchor tag with 'target=\"_blank\"' is missing 'noreferrer'. A page opened with 'target=\"_blank\"' can access the window object of the origin page. This means it can manipulate the 'window.opener' property, which could redirect the origin page to a malicious URL. This is called reverse tabnabbing. To prevent this, include 'rel=noreferrer' on this tag."
              },
              "helpUri": "https://semgrep.dev/r/html.security.missing-noreferrer.missing-noreferrer",
              "id": "html.security.missing-noreferrer.missing-noreferrer",
              "name": "html.security.missing-noreferrer.missing-noreferrer",
              "properties": { "precision": "very-high", "tags": [] },
              "shortDescription": {
                "text": "This anchor tag with 'target=\"_blank\"' is missing 'noreferrer'. A page opened with 'target=\"_blank\"' can access the window object of the origin page. This means it can manipulate the 'window.opener' property, which could redirect the origin page to a malicious URL. This is called reverse tabnabbing. To prevent this, include 'rel=noreferrer' on this tag."
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "Hardcoded password is used as a default argument to '$FUNC'. This could be dangerous if a real password is not supplied."
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.hardcoded-password-default-argument.hardcoded-password-default-argument",
              "id": "python.lang.security.audit.hardcoded-password-default-argument.hardcoded-password-default-argument",
              "name": "python.lang.security.audit.hardcoded-password-default-argument.hardcoded-password-default-argument",
              "properties": { "precision": "very-high", "tags": [] },
              "shortDescription": {
                "text": "Hardcoded password is used as a default argument to '$FUNC'. This could be dangerous if a real password is not supplied."
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "Detected RC2 cipher algorithm which is considered insecure. The algorithm has known vulnerabilities and is difficult to use securely. Use AES instead."
              },
              "helpUri": "https://semgrep.dev/r/python.pycryptodome.security.insecure-cipher-algorithm.insecure-cipher-algorithm-rc2",
              "id": "python.pycryptodome.security.insecure-cipher-algorithm.insecure-cipher-algorithm-rc2",
              "name": "python.pycryptodome.security.insecure-cipher-algorithm.insecure-cipher-algorithm-rc2",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
                  "OWASP-A3: Sensitive Data Exposure"
                ]
              },
              "shortDescription": {
                "text": "Detected RC2 cipher algorithm which is considered insecure. The algorithm has known vulnerabilities and is difficult to use securely. Use AES instead."
              }
            },
            {
              "defaultConfiguration": { "level": "error" },
              "fullDescription": {
                "text": "Certificate verification has been explicitly disabled. This permits insecure connections to insecure servers. Re-enable certification validation."
              },
              "helpUri": "https://semgrep.dev/r/python.requests.security.disabled-cert-validation.disabled-cert-validation",
              "id": "python.requests.security.disabled-cert-validation.disabled-cert-validation",
              "name": "python.requests.security.disabled-cert-validation.disabled-cert-validation",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-295: Improper Certificate Validation",
                  "OWASP-A3: Sensitive Data Exposure"
                ]
              },
              "shortDescription": {
                "text": "Certificate verification has been explicitly disabled. This permits insecure connections to insecure servers. Re-enable certification validation."
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "If unverified user data can reach the XML Parser it can result in XML External or Internal Entity (XXE) Processing vulnerabilities"
              },
              "helpUri": "https://semgrep.dev/r/javascript.node-expat.security.audit.expat-xxe.expat-xxe",
              "id": "javascript.node-expat.security.audit.expat-xxe.expat-xxe",
              "name": "javascript.node-expat.security.audit.expat-xxe.expat-xxe",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-611: Improper Restriction of XML External Entity Reference",
                  "OWASP-A4: XML External Entities (XXE)"
                ]
              },
              "shortDescription": {
                "text": "If unverified user data can reach the XML Parser it can result in XML External or Internal Entity (XXE) Processing vulnerabilities"
              }
            },
            {
              "defaultConfiguration": { "level": "error" },
              "fullDescription": {
                "text": "Found 'subprocess' function '$FUNC' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.subprocess-shell-true.subprocess-shell-true",
              "id": "python.lang.security.audit.subprocess-shell-true.subprocess-shell-true",
              "name": "python.lang.security.audit.subprocess-shell-true.subprocess-shell-true",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
                  "OWASP-A1: Injection"
                ]
              },
              "shortDescription": {
                "text": "Found 'subprocess' function '$FUNC' with 'shell=True'. This is dangerous because this call will spawn the command using a shell process. Doing so propagates current shell settings and variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead."
              }
            },
            {
              "defaultConfiguration": { "level": "note" },
              "fullDescription": {
                "text": "Mako templates do not provide a global HTML escaping mechanism. This means you must escape all sensitive data in your templates using '| u' for URL escaping or '| h' for HTML escaping. If you are using Mako to serve web content, consider using a system such as Jinja2 which enables global escaping."
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.mako-templates-detected.mako-templates-detected",
              "id": "python.lang.security.audit.mako-templates-detected.mako-templates-detected",
              "name": "python.lang.security.audit.mako-templates-detected.mako-templates-detected",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
                  "OWASP-A7: Cross-Site Scripting (XSS)"
                ]
              },
              "shortDescription": {
                "text": "Mako templates do not provide a global HTML escaping mechanism. This means you must escape all sensitive data in your templates using '| u' for URL escaping or '| h' for HTML escaping. If you are using Mako to serve web content, consider using a system such as Jinja2 which enables global escaping."
              }
            },
            {
              "defaultConfiguration": { "level": "note" },
              "fullDescription": {
                "text": "Running `socket.bind` to 0.0.0.0, ::, or empty string could unexpectedly expose the server publicly as it binds to all available interfaces. Consider instead getting correct address from an environment variable or configuration file."
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.network.bind.avoid-bind-to-all-interfaces",
              "id": "python.lang.security.audit.network.bind.avoid-bind-to-all-interfaces",
              "name": "python.lang.security.audit.network.bind.avoid-bind-to-all-interfaces",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-200: Exposure of Sensitive Information to an Unauthorized Actor",
                  "OWASP-A6: Security Misconfiguration"
                ]
              },
              "shortDescription": {
                "text": "Running `socket.bind` to 0.0.0.0, ::, or empty string could unexpectedly expose the server publicly as it binds to all available interfaces. Consider instead getting correct address from an environment variable or configuration file."
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. If using Flask, use 'url_for()' to safely generate a URL. If using Django, use the 'url' filter to safely generate a URL. If using Mustache, use a URL encoding library, or prepend a slash '/' to the variable for relative links (`href=\"/{{link}}\"`). You may also consider setting the Content Security Policy (CSP) header."
              },
              "helpUri": "https://semgrep.dev/r/generic.html-templates.security.var-in-href.var-in-href",
              "id": "generic.html-templates.security.var-in-href.var-in-href",
              "name": "generic.html-templates.security.var-in-href.var-in-href",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
                  "OWASP-A7: Cross-Site Scripting (XSS)"
                ]
              },
              "shortDescription": {
                "text": "Detected a template variable used in an anchor tag with the 'href' attribute. This allows a malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS) attacks. If using Flask, use 'url_for()' to safely generate a URL. If using Django, use the 'url' filter to safely generate a URL. If using Mustache, use a URL encoding library, or prepend a slash '/' to the variable for relative links (`href=\"/{{link}}\"`). You may also consider setting the Content Security Policy (CSP) header."
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "Detected a segment of a Flask template where autoescaping is explicitly disabled with '| safe' filter. This allows rendering of raw HTML in this segment. Ensure no user data is rendered here, otherwise this is a cross-site scripting (XSS) vulnerability."
              },
              "helpUri": "https://semgrep.dev/r/python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe",
              "id": "python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe",
              "name": "python.flask.security.xss.audit.template-unescaped-with-safe.template-unescaped-with-safe",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
                  "OWASP-A7: Cross-Site Scripting (XSS)"
                ]
              },
              "shortDescription": {
                "text": "Detected a segment of a Flask template where autoescaping is explicitly disabled with '| safe' filter. This allows rendering of raw HTML in this segment. Ensure no user data is rendered here, otherwise this is a cross-site scripting (XSS) vulnerability."
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead."
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1",
              "id": "python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1",
              "name": "python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
                  "OWASP-A3: Sensitive Data Exposure"
                ]
              },
              "shortDescription": {
                "text": "Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead."
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "Detected a Context with autoescape disabled. If you are rendering any web pages, this exposes your application to cross-site scripting (XSS) vulnerabilities. Remove 'autoescape: False' or set it to 'True'."
              },
              "helpUri": "https://semgrep.dev/r/python.django.security.audit.xss.context-autoescape-off.context-autoescape-off",
              "id": "python.django.security.audit.xss.context-autoescape-off.context-autoescape-off",
              "name": "python.django.security.audit.xss.context-autoescape-off.context-autoescape-off",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
                  "OWASP-A7: Cross-Site Scripting (XSS)"
                ]
              },
              "shortDescription": {
                "text": "Detected a Context with autoescape disabled. If you are rendering any web pages, this exposes your application to cross-site scripting (XSS) vulnerabilities. Remove 'autoescape: False' or set it to 'True'."
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "Markup escaping disabled. This can be used with some template engines to escape disabling of HTML entities, which can lead to XSS attacks."
              },
              "helpUri": "https://semgrep.dev/r/javascript.lang.security.detect-disable-mustache-escape.detect-disable-mustache-escape",
              "id": "javascript.lang.security.detect-disable-mustache-escape.detect-disable-mustache-escape",
              "name": "javascript.lang.security.detect-disable-mustache-escape.detect-disable-mustache-escape",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-116: Improper Encoding or Escaping of Output",
                  "OWASP-A7: Cross-Site Scripting (XSS)"
                ]
              },
              "shortDescription": {
                "text": "Markup escaping disabled. This can be used with some template engines to escape disabling of HTML entities, which can lead to XSS attacks."
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "It looks like '$UNK' is read from user input and it is used to as a redirect. Ensure '$UNK' is not externally controlled, otherwise this is an open redirect."
              },
              "helpUri": "https://semgrep.dev/r/javascript.express.security.audit.possible-user-input-redirect.unknown-value-in-redirect",
              "id": "javascript.express.security.audit.possible-user-input-redirect.unknown-value-in-redirect",
              "name": "javascript.express.security.audit.possible-user-input-redirect.unknown-value-in-redirect",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-601: URL Redirection to Untrusted Site ('Open Redirect')",
                  "OWASP-A1: Injection"
                ]
              },
              "shortDescription": {
                "text": "It looks like '$UNK' is read from user input and it is used to as a redirect. Ensure '$UNK' is not externally controlled, otherwise this is an open redirect."
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "Found request data in an EmailMessage that is set to use HTML. This is dangerous because HTML emails are susceptible to XSS. An attacker could inject data into this HTML email, causing XSS."
              },
              "helpUri": "https://semgrep.dev/r/python.django.security.injection.email.xss-html-email-body.xss-html-email-body",
              "id": "python.django.security.injection.email.xss-html-email-body.xss-html-email-body",
              "name": "python.django.security.injection.email.xss-html-email-body.xss-html-email-body",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')",
                  "OWASP-A1: Injection"
                ]
              },
              "shortDescription": {
                "text": "Found request data in an EmailMessage that is set to use HTML. This is dangerous because HTML emails are susceptible to XSS. An attacker could inject data into this HTML email, causing XSS."
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "Detected usage of crypto.pseudoRandomBytes, which does not produce secure random numbers."
              },
              "helpUri": "https://semgrep.dev/r/javascript.lang.security.detect-pseudorandombytes.detect-pseudoRandomBytes",
              "id": "javascript.lang.security.detect-pseudorandombytes.detect-pseudoRandomBytes",
              "name": "javascript.lang.security.detect-pseudorandombytes.detect-pseudoRandomBytes",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-338: Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)",
                  "OWASP-A9: Using Components with Known Vulnerabilities"
                ]
              },
              "shortDescription": {
                "text": "Detected usage of crypto.pseudoRandomBytes, which does not produce secure random numbers."
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "Avoid using `cPickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-cPickle",
              "id": "python.lang.security.deserialization.pickle.avoid-cPickle",
              "name": "python.lang.security.deserialization.pickle.avoid-cPickle",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-502: Deserialization of Untrusted Data",
                  "OWASP-A8: Insecure Deserialization"
                ]
              },
              "shortDescription": {
                "text": "Avoid using `cPickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "Hardcoded variable `TESTING` detected. Use environment variables or config files instead"
              },
              "helpUri": "https://semgrep.dev/r/python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_TESTING",
              "id": "python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_TESTING",
              "name": "python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_TESTING",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-489: Active Debug Code",
                  "OWASP-A6: Security Misconfiguration"
                ]
              },
              "shortDescription": {
                "text": "Hardcoded variable `TESTING` detected. Use environment variables or config files instead"
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "Detected RC4 cipher algorithm which is considered insecure. The algorithm has many known vulnerabilities. Use AES instead."
              },
              "helpUri": "https://semgrep.dev/r/python.pycryptodome.security.insecure-cipher-algorithm.insecure-cipher-algorithm-rc4",
              "id": "python.pycryptodome.security.insecure-cipher-algorithm.insecure-cipher-algorithm-rc4",
              "name": "python.pycryptodome.security.insecure-cipher-algorithm.insecure-cipher-algorithm-rc4",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
                  "OWASP-A3: Sensitive Data Exposure"
                ]
              },
              "shortDescription": {
                "text": "Detected RC4 cipher algorithm which is considered insecure. The algorithm has many known vulnerabilities. Use AES instead."
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead."
              },
              "helpUri": "https://semgrep.dev/r/python.cryptography.security.insecure-hash-algorithms.insecure-hash-algorithm-md5",
              "id": "python.cryptography.security.insecure-hash-algorithms.insecure-hash-algorithm-md5",
              "name": "python.cryptography.security.insecure-hash-algorithms.insecure-hash-algorithm-md5",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
                  "OWASP-A3: Sensitive Data Exposure"
                ]
              },
              "shortDescription": {
                "text": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead."
              }
            },
            {
              "defaultConfiguration": { "level": "error" },
              "fullDescription": {
                "text": "Password is exposed through JWT token payload. This is not encrypted and the password could be compromised. Do not store passwords in JWT tokens."
              },
              "helpUri": "https://semgrep.dev/r/javascript.jsonwebtoken.security.jwt-exposed-credentials.jwt-exposed-credentials",
              "id": "javascript.jsonwebtoken.security.jwt-exposed-credentials.jwt-exposed-credentials",
              "name": "javascript.jsonwebtoken.security.jwt-exposed-credentials.jwt-exposed-credentials",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-522: Insufficiently Protected Credentials",
                  "OWASP-A2: Broken Authentication"
                ]
              },
              "shortDescription": {
                "text": "Password is exposed through JWT token payload. This is not encrypted and the password could be compromised. Do not store passwords in JWT tokens."
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "QuerySet.extra does not provide safeguards against SQL injection and requires very careful use. Therefore, it is advisable not to use .extra and to instead use the Django ORM. See https://docs.djangoproject.com/en/3.0/ref/models/querysets/#django.db.models.query.QuerySet.extra for more details."
              },
              "helpUri": "https://semgrep.dev/r/python.django.security.audit.query-set-extra.avoid-query-set-extra",
              "id": "python.django.security.audit.query-set-extra.avoid-query-set-extra",
              "name": "python.django.security.audit.query-set-extra.avoid-query-set-extra",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
                  "OWASP-['A01:2017 - Injection', 'A03:2021 - Injection']"
                ]
              },
              "shortDescription": {
                "text": "QuerySet.extra does not provide safeguards against SQL injection and requires very careful use. Therefore, it is advisable not to use .extra and to instead use the Django ORM. See https://docs.djangoproject.com/en/3.0/ref/models/querysets/#django.db.models.query.QuerySet.extra for more details."
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "This anchor tag with 'target=\"_blank\"' is missing 'noopener'. A page opened with 'target=\"_blank\"' can access the window object of the origin page. This means it can manipulate the 'window.opener' property, which could redirect the origin page to a malicious URL. This is called reverse tabnabbing. To prevent this, include 'rel=noopener' on this tag"
              },
              "helpUri": "https://semgrep.dev/r/html.security.missing-noopener.missing-noopener",
              "id": "html.security.missing-noopener.missing-noopener",
              "name": "html.security.missing-noopener.missing-noopener",
              "properties": { "precision": "very-high", "tags": [] },
              "shortDescription": {
                "text": "This anchor tag with 'target=\"_blank\"' is missing 'noopener'. A page opened with 'target=\"_blank\"' can access the window object of the origin page. This means it can manipulate the 'window.opener' property, which could redirect the origin page to a malicious URL. This is called reverse tabnabbing. To prevent this, include 'rel=noopener' on this tag"
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead."
              },
              "helpUri": "https://semgrep.dev/r/python.pycryptodome.security.insecure-hash-algorithm.insecure-hash-algorithm-sha1",
              "id": "python.pycryptodome.security.insecure-hash-algorithm.insecure-hash-algorithm-sha1",
              "name": "python.pycryptodome.security.insecure-hash-algorithm.insecure-hash-algorithm-sha1",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
                  "OWASP-A3: Sensitive Data Exposure"
                ]
              },
              "shortDescription": {
                "text": "Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead."
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "Hardcoded variable `ENV` detected. Set this by using FLASK_ENV environment variable"
              },
              "helpUri": "https://semgrep.dev/r/python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_ENV",
              "id": "python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_ENV",
              "name": "python.flask.security.audit.hardcoded-config.avoid_hardcoded_config_ENV",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-489: Active Debug Code",
                  "OWASP-A6: Security Misconfiguration"
                ]
              },
              "shortDescription": {
                "text": "Hardcoded variable `ENV` detected. Set this by using FLASK_ENV environment variable"
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "Detected use of an insecure MD4 or MD5 hash function. These functions have known vulnerabilities and are considered deprecated. Consider using 'SHA256' or a similar function instead."
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.insecure-hash-function.insecure-hash-function",
              "id": "python.lang.security.insecure-hash-function.insecure-hash-function",
              "name": "python.lang.security.insecure-hash-function.insecure-hash-function",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
                  "OWASP-A3: Sensitive Data Exposure"
                ]
              },
              "shortDescription": {
                "text": "Detected use of an insecure MD4 or MD5 hash function. These functions have known vulnerabilities and are considered deprecated. Consider using 'SHA256' or a similar function instead."
              }
            },
            {
              "defaultConfiguration": { "level": "error" },
              "fullDescription": {
                "text": "Found an insecure gRPC connection. This creates a connection without encryption to a gRPC client/server. A malicious attacker could tamper with the gRPC message, which could compromise the machine."
              },
              "helpUri": "https://semgrep.dev/r/javascript.grpc.security.grpc-nodejs-insecure-connection.grpc-nodejs-insecure-connection",
              "id": "javascript.grpc.security.grpc-nodejs-insecure-connection.grpc-nodejs-insecure-connection",
              "name": "javascript.grpc.security.grpc-nodejs-insecure-connection.grpc-nodejs-insecure-connection",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-502: Deserialization of Untrusted Data",
                  "OWASP-A8: Insecure Deserialization"
                ]
              },
              "shortDescription": {
                "text": "Found an insecure gRPC connection. This creates a connection without encryption to a gRPC client/server. A malicious attacker could tamper with the gRPC message, which could compromise the machine."
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "Detected a unquoted template variable as an attribute. If unquoted, a malicious actor could inject custom JavaScript handlers. To fix this, add quotes around the template expression, like this: \"{{ expr }}\"."
              },
              "helpUri": "https://semgrep.dev/r/generic.html-templates.security.unquoted-attribute-var.unquoted-attribute-var",
              "id": "generic.html-templates.security.unquoted-attribute-var.unquoted-attribute-var",
              "name": "generic.html-templates.security.unquoted-attribute-var.unquoted-attribute-var",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
                  "OWASP-A7: Cross-Site Scripting (XSS)"
                ]
              },
              "shortDescription": {
                "text": "Detected a unquoted template variable as an attribute. If unquoted, a malicious actor could inject custom JavaScript handlers. To fix this, add quotes around the template expression, like this: \"{{ expr }}\"."
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "Detected MD2 hash algorithm which is considered insecure. This algorithm has many known vulnerabilities and has been deprecated. Use SHA256 or SHA3 instead."
              },
              "helpUri": "https://semgrep.dev/r/python.pycryptodome.security.insecure-hash-algorithm.insecure-hash-algorithm-md2",
              "id": "python.pycryptodome.security.insecure-hash-algorithm.insecure-hash-algorithm-md2",
              "name": "python.pycryptodome.security.insecure-hash-algorithm.insecure-hash-algorithm-md2",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
                  "OWASP-A3: Sensitive Data Exposure"
                ]
              },
              "shortDescription": {
                "text": "Detected MD2 hash algorithm which is considered insecure. This algorithm has many known vulnerabilities and has been deprecated. Use SHA256 or SHA3 instead."
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected",
              "id": "python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected",
              "name": "python.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-939: Improper Authorization in Handler for Custom URL Scheme",
                  "OWASP-A1: Injection"
                ]
              },
              "shortDescription": {
                "text": "Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead."
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "Found request data in 'send_mail(...)' that uses 'html_message'. This is dangerous because HTML emails are susceptible to XSS. An attacker could inject data into this HTML email, causing XSS."
              },
              "helpUri": "https://semgrep.dev/r/python.django.security.injection.email.xss-send-mail-html-message.xss-send-mail-html-message",
              "id": "python.django.security.injection.email.xss-send-mail-html-message.xss-send-mail-html-message",
              "name": "python.django.security.injection.email.xss-send-mail-html-message.xss-send-mail-html-message",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-74: Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')",
                  "OWASP-A1: Injection"
                ]
              },
              "shortDescription": {
                "text": "Found request data in 'send_mail(...)' that uses 'html_message'. This is dangerous because HTML emails are susceptible to XSS. An attacker could inject data into this HTML email, causing XSS."
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "Detected XOR cipher algorithm which is considered insecure. This algorithm is not cryptographically secure and can be reversed easily. Use AES instead."
              },
              "helpUri": "https://semgrep.dev/r/python.pycryptodome.security.insecure-cipher-algorithm.insecure-cipher-algorithm-xor",
              "id": "python.pycryptodome.security.insecure-cipher-algorithm.insecure-cipher-algorithm-xor",
              "name": "python.pycryptodome.security.insecure-cipher-algorithm.insecure-cipher-algorithm-xor",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
                  "OWASP-A3: Sensitive Data Exposure"
                ]
              },
              "shortDescription": {
                "text": "Detected XOR cipher algorithm which is considered insecure. This algorithm is not cryptographically secure and can be reversed easily. Use AES instead."
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "Found a formatted string in BashOperator: $CMD. This could be vulnerable to injection. Be extra sure your variables are not controllable by external sources."
              },
              "helpUri": "https://semgrep.dev/r/python.airflow.security.audit.formatted-string-bashoperator.formatted-string-bashoperator",
              "id": "python.airflow.security.audit.formatted-string-bashoperator.formatted-string-bashoperator",
              "name": "python.airflow.security.audit.formatted-string-bashoperator.formatted-string-bashoperator",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
                  "OWASP-A1: Injection"
                ]
              },
              "shortDescription": {
                "text": "Found a formatted string in BashOperator: $CMD. This could be vulnerable to injection. Be extra sure your variables are not controllable by external sources."
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "There is rarely a good reason to use @csrf_exempt as is used for `$R`."
              },
              "helpUri": "https://semgrep.dev/r/python.django.security.audit.csrf-exempt.no-csrf-exempt",
              "id": "python.django.security.audit.csrf-exempt.no-csrf-exempt",
              "name": "python.django.security.audit.csrf-exempt.no-csrf-exempt",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-352: Cross-Site Request Forgery (CSRF)",
                  "OWASP-A6: Security Misconfiguration"
                ]
              },
              "shortDescription": {
                "text": "There is rarely a good reason to use @csrf_exempt as is used for `$R`."
              }
            },
            {
              "defaultConfiguration": { "level": "error" },
              "fullDescription": {
                "text": "Detected user data flowing into eval. This is code injection and should be avoided."
              },
              "helpUri": "https://semgrep.dev/r/python.flask.security.injection.user-eval.eval-injection",
              "id": "python.flask.security.injection.user-eval.eval-injection",
              "name": "python.flask.security.injection.user-eval.eval-injection",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')",
                  "OWASP-A1: Injection"
                ]
              },
              "shortDescription": {
                "text": "Detected user data flowing into eval. This is code injection and should be avoided."
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`)."
              },
              "helpUri": "https://semgrep.dev/r/generic.html-templates.security.var-in-script-tag.var-in-script-tag",
              "id": "generic.html-templates.security.var-in-script-tag.var-in-script-tag",
              "name": "generic.html-templates.security.var-in-script-tag.var-in-script-tag",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
                  "OWASP-A7: Cross-Site Scripting (XSS)"
                ]
              },
              "shortDescription": {
                "text": "Detected a template variable used in a script tag. Although template variables are HTML escaped, HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and retrieving the data in your script by using the element ID (e.g., `document.getElementById`)."
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "The marshal module is not intended to be secure against erroneous or maliciously constructed data. Never unmarshal data received from an untrusted or unauthenticated source. See more details: https://docs.python.org/3/library/marshal.html?highlight=security"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.marshal.marshal-usage",
              "id": "python.lang.security.audit.marshal.marshal-usage",
              "name": "python.lang.security.audit.marshal.marshal-usage",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-502: Deserialization of Untrusted Data",
                  "OWASP-A8: Insecure Deserialization"
                ]
              },
              "shortDescription": {
                "text": "The marshal module is not intended to be secure against erroneous or maliciously constructed data. Never unmarshal data received from an untrusted or unauthenticated source. See more details: https://docs.python.org/3/library/marshal.html?highlight=security"
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "Flask response reflects unsanitized user input. This could lead to a cross-site scripting vulnerability (https://owasp.org/www-community/attacks/xss/) in which an attacker causes arbitrary code to be executed in the user's browser. To prevent, please sanitize the user input, e.g. by rendering the response in a Jinja2 template (see considerations in https://flask.palletsprojects.com/en/1.0.x/security/)."
              },
              "helpUri": "https://semgrep.dev/r/python.flask.security.unsanitized-input.response-contains-unsanitized-input",
              "id": "python.flask.security.unsanitized-input.response-contains-unsanitized-input",
              "name": "python.flask.security.unsanitized-input.response-contains-unsanitized-input",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
                  "OWASP-A7: Cross-Site Scripting (XSS)"
                ]
              },
              "shortDescription": {
                "text": "Flask response reflects unsanitized user input. This could lead to a cross-site scripting vulnerability (https://owasp.org/www-community/attacks/xss/) in which an attacker causes arbitrary code to be executed in the user's browser. To prevent, please sanitize the user input, e.g. by rendering the response in a Jinja2 template (see considerations in https://flask.palletsprojects.com/en/1.0.x/security/)."
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "Flask cookies should be handled securely by setting secure=True, httponly=True, and samesite='Lax' in response.set_cookie(...). If your situation calls for different settings, explicitly disable the setting. If you want to send the cookie over http, set secure=False.  If you want to let client-side JavaScript read the cookie, set httponly=False. If you want to attach cookies to requests for external sites, set samesite=None."
              },
              "helpUri": "https://semgrep.dev/r/python.flask.security.audit.secure-set-cookie.secure-set-cookie",
              "id": "python.flask.security.audit.secure-set-cookie.secure-set-cookie",
              "name": "python.flask.security.audit.secure-set-cookie.secure-set-cookie",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute",
                  "OWASP-A3: Sensitive Data Exposure"
                ]
              },
              "shortDescription": {
                "text": "Flask cookies should be handled securely by setting secure=True, httponly=True, and samesite='Lax' in response.set_cookie(...). If your situation calls for different settings, explicitly disable the setting. If you want to send the cookie over http, set secure=False.  If you want to let client-side JavaScript read the cookie, set httponly=False. If you want to attach cookies to requests for external sites, set samesite=None."
              }
            },
            {
              "defaultConfiguration": { "level": "error" },
              "fullDescription": {
                "text": "Unencrypted request over HTTP detected."
              },
              "helpUri": "https://semgrep.dev/r/typescript.react.security.react-insecure-request.react-insecure-request",
              "id": "typescript.react.security.react-insecure-request.react-insecure-request",
              "name": "typescript.react.security.react-insecure-request.react-insecure-request",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-319: Cleartext Transmission of Sensitive Information",
                  "OWASP-A3: Sensitive Data Exposure"
                ]
              },
              "shortDescription": {
                "text": "Unencrypted request over HTTP detected."
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "Autoescape is globally disbaled for this Django application. If you are rendering any web pages, this exposes your application to cross-site scripting (XSS) vulnerabilities. Remove 'autoescape: False' or set it to 'True'."
              },
              "helpUri": "https://semgrep.dev/r/python.django.security.audit.xss.global-autoescape-off.global-autoescape-off",
              "id": "python.django.security.audit.xss.global-autoescape-off.global-autoescape-off",
              "name": "python.django.security.audit.xss.global-autoescape-off.global-autoescape-off",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
                  "OWASP-A7: Cross-Site Scripting (XSS)"
                ]
              },
              "shortDescription": {
                "text": "Autoescape is globally disbaled for this Django application. If you are rendering any web pages, this exposes your application to cross-site scripting (XSS) vulnerabilities. Remove 'autoescape: False' or set it to 'True'."
              }
            },
            {
              "defaultConfiguration": { "level": "error" },
              "fullDescription": {
                "text": "Hardcoded JWT secret or private key is used. This is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html Consider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables: process.env.SECRET)"
              },
              "helpUri": "https://semgrep.dev/r/javascript.jsonwebtoken.security.jwt-hardcode.hardcoded-jwt-secret",
              "id": "javascript.jsonwebtoken.security.jwt-hardcode.hardcoded-jwt-secret",
              "name": "javascript.jsonwebtoken.security.jwt-hardcode.hardcoded-jwt-secret",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-522: Insufficiently Protected Credentials",
                  "OWASP-A2: Broken Authentication"
                ]
              },
              "shortDescription": {
                "text": "Hardcoded JWT secret or private key is used. This is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html Consider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables: process.env.SECRET)"
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "Detected a Custom Expression ''$EXPRESSION'' calling ''as_sql(...).'' Ensure no user input enters this function because it is susceptible to SQL injection. See https://docs.djangoproject.com/en/3.0/ref/models/expressions/#django.db.models.Func.as_sql for more information."
              },
              "helpUri": "https://semgrep.dev/r/python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql",
              "id": "python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql",
              "name": "python.django.security.audit.custom-expression-as-sql.custom-expression-as-sql",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
                  "OWASP-A1: Injection"
                ]
              },
              "shortDescription": {
                "text": "Detected a Custom Expression ''$EXPRESSION'' calling ''as_sql(...).'' Ensure no user input enters this function because it is susceptible to SQL injection. See https://docs.djangoproject.com/en/3.0/ref/models/expressions/#django.db.models.Func.as_sql for more information."
              }
            },
            {
              "defaultConfiguration": { "level": "error" },
              "fullDescription": {
                "text": "Hardcoded JWT secret or private key is used. This is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html Consider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables: process.env.SECRET)"
              },
              "helpUri": "https://semgrep.dev/r/javascript.jose.security.jwt-hardcode.hardcoded-jwt-secret",
              "id": "javascript.jose.security.jwt-hardcode.hardcoded-jwt-secret",
              "name": "javascript.jose.security.jwt-hardcode.hardcoded-jwt-secret",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-522: Insufficiently Protected Credentials",
                  "OWASP-A2: Broken Authentication"
                ]
              },
              "shortDescription": {
                "text": "Hardcoded JWT secret or private key is used. This is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html Consider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables: process.env.SECRET)"
              }
            },
            {
              "defaultConfiguration": { "level": "error" },
              "fullDescription": {
                "text": "Detected HTTPConnectionPool. This will transmit data in cleartext. It is recommended to use HTTPSConnectionPool instead for to encrypt communications."
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.network.http-not-https-connection.http-not-https-connection",
              "id": "python.lang.security.audit.network.http-not-https-connection.http-not-https-connection",
              "name": "python.lang.security.audit.network.http-not-https-connection.http-not-https-connection",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-319: Cleartext Transmission of Sensitive Information",
                  "OWASP-A3: Sensitive Data Exposure"
                ]
              },
              "shortDescription": {
                "text": "Detected HTTPConnectionPool. This will transmit data in cleartext. It is recommended to use HTTPSConnectionPool instead for to encrypt communications."
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "Detected a paramiko host key policy that implicitly trusts a server's host key. Host keys should be verified to ensure the connection is not to a malicious server. Use RejectPolicy or a custom subclass instead."
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.paramiko-implicit-trust-host-key.paramiko-implicit-trust-host-key",
              "id": "python.lang.security.audit.paramiko-implicit-trust-host-key.paramiko-implicit-trust-host-key",
              "name": "python.lang.security.audit.paramiko-implicit-trust-host-key.paramiko-implicit-trust-host-key",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-322: Key Exchange without Entity Authentication",
                  "OWASP-A3: Sensitive Data Exposure"
                ]
              },
              "shortDescription": {
                "text": "Detected a paramiko host key policy that implicitly trusts a server's host key. Host keys should be verified to ensure the connection is not to a malicious server. Use RejectPolicy or a custom subclass instead."
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "Avoid using `shelve`, which uses `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-shelve",
              "id": "python.lang.security.deserialization.pickle.avoid-shelve",
              "name": "python.lang.security.deserialization.pickle.avoid-shelve",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-502: Deserialization of Untrusted Data",
                  "OWASP-A8: Insecure Deserialization"
                ]
              },
              "shortDescription": {
                "text": "Avoid using `shelve`, which uses `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "If unverified user data can reach the XML Parser it can result in XML External or Internal Entity (XXE) Processing vulnerabilities"
              },
              "helpUri": "https://semgrep.dev/r/javascript.xml2json.security.audit.xml2json-xxe.xml2json-xxe",
              "id": "javascript.xml2json.security.audit.xml2json-xxe.xml2json-xxe",
              "name": "javascript.xml2json.security.audit.xml2json-xxe.xml2json-xxe",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-611: Improper Restriction of XML External Entity Reference",
                  "OWASP-A4: XML External Entities (XXE)"
                ]
              },
              "shortDescription": {
                "text": "If unverified user data can reach the XML Parser it can result in XML External or Internal Entity (XXE) Processing vulnerabilities"
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "Running flask app with host 0.0.0.0 could expose the server publicly."
              },
              "helpUri": "https://semgrep.dev/r/python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host",
              "id": "python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host",
              "name": "python.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-668: Exposure of Resource to Wrong Sphere",
                  "OWASP-A6: Security Misconfiguration"
                ]
              },
              "shortDescription": {
                "text": "Running flask app with host 0.0.0.0 could expose the server publicly."
              }
            },
            {
              "defaultConfiguration": { "level": "error" },
              "fullDescription": {
                "text": "You should be very careful whenever you write raw SQL. Consider using Django ORM before raw SQL. See https://docs.djangoproject.com/en/3.0/topics/db/sql/#passing-parameters-into-raw"
              },
              "helpUri": "https://semgrep.dev/r/python.django.security.audit.raw-query.avoid-raw-sql",
              "id": "python.django.security.audit.raw-query.avoid-raw-sql",
              "name": "python.django.security.audit.raw-query.avoid-raw-sql",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
                  "OWASP-A1: Injection"
                ]
              },
              "shortDescription": {
                "text": "You should be very careful whenever you write raw SQL. Consider using Django ORM before raw SQL. See https://docs.djangoproject.com/en/3.0/topics/db/sql/#passing-parameters-into-raw"
              }
            },
            {
              "defaultConfiguration": { "level": "error" },
              "fullDescription": {
                "text": "Authentication detected over HTTP. HTTP does not provide any encryption or protection for these authentication credentials. This may expose these credentials to unauthorized parties. Use 'https://' instead."
              },
              "helpUri": "https://semgrep.dev/r/python.requests.security.no-auth-over-http.no-auth-over-http",
              "id": "python.requests.security.no-auth-over-http.no-auth-over-http",
              "name": "python.requests.security.no-auth-over-http.no-auth-over-http",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-523: Unprotected Transport of Credentials",
                  "OWASP-A2: Broken Authentication"
                ]
              },
              "shortDescription": {
                "text": "Authentication detected over HTTP. HTTP does not provide any encryption or protection for these authentication credentials. This may expose these credentials to unauthorized parties. Use 'https://' instead."
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks."
              },
              "helpUri": "https://semgrep.dev/r/python.flask.security.audit.render-template-string.render-template-string",
              "id": "python.flask.security.audit.render-template-string.render-template-string",
              "name": "python.flask.security.audit.render-template-string.render-template-string",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')",
                  "OWASP-A1: Injection"
                ]
              },
              "shortDescription": {
                "text": "Found a template created with string formatting. This is susceptible to server-side template injection and cross-site scripting attacks."
              }
            },
            {
              "defaultConfiguration": { "level": "error" },
              "fullDescription": {
                "text": "Avoid using insecure deserialization library, backed by `pickle`, `_pickle`, `cpickle`, `dill`, `shelve`, or `yaml`, which are known to lead to remote code execution vulnerabilities."
              },
              "helpUri": "https://semgrep.dev/r/python.django.security.audit.avoid-insecure-deserialization.avoid-insecure-deserialization",
              "id": "python.django.security.audit.avoid-insecure-deserialization.avoid-insecure-deserialization",
              "name": "python.django.security.audit.avoid-insecure-deserialization.avoid-insecure-deserialization",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-502: Deserialization of Untrusted Data",
                  "OWASP-A8: Insecure Deserialization"
                ]
              },
              "shortDescription": {
                "text": "Avoid using insecure deserialization library, backed by `pickle`, `_pickle`, `cpickle`, `dill`, `shelve`, or `yaml`, which are known to lead to remote code execution vulnerabilities."
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "FTP does not encrypt communications by default. This can lead to sensitive data being exposed. Ensure use of FTP here does not expose sensitive data."
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.ftplib.ftplib",
              "id": "python.lang.security.audit.ftplib.ftplib",
              "name": "python.lang.security.audit.ftplib.ftplib",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-319: Cleartext Transmission of Sensitive Information",
                  "OWASP-A3: Sensitive Data Exposure"
                ]
              },
              "shortDescription": {
                "text": "FTP does not encrypt communications by default. This can lead to sensitive data being exposed. Ensure use of FTP here does not expose sensitive data."
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "Detected ECB cipher mode which is considered insecure. The algorithm can potentially leak information about the plaintext. Use CBC mode instead."
              },
              "helpUri": "https://semgrep.dev/r/python.cryptography.security.insecure-cipher-mode-ecb.insecure-cipher-mode-ecb",
              "id": "python.cryptography.security.insecure-cipher-mode-ecb.insecure-cipher-mode-ecb",
              "name": "python.cryptography.security.insecure-cipher-mode-ecb.insecure-cipher-mode-ecb",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
                  "OWASP-A3: Sensitive Data Exposure"
                ]
              },
              "shortDescription": {
                "text": "Detected ECB cipher mode which is considered insecure. The algorithm can potentially leak information about the plaintext. Use CBC mode instead."
              }
            },
            {
              "defaultConfiguration": { "level": "error" },
              "fullDescription": {
                "text": "Detected the use of an insecure deserialization library in a Flask route. These libraries are prone to code execution vulnerabilities. Ensure user data does not enter this function. To fix this, try to avoid serializing whole objects. Consider instead using a serializer such as JSON."
              },
              "helpUri": "https://semgrep.dev/r/python.flask.security.insecure-deserialization.insecure-deserialization",
              "id": "python.flask.security.insecure-deserialization.insecure-deserialization",
              "name": "python.flask.security.insecure-deserialization.insecure-deserialization",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-502: Deserialization of Untrusted Data",
                  "OWASP-A8: Insecure Deserialization"
                ]
              },
              "shortDescription": {
                "text": "Detected the use of an insecure deserialization library in a Flask route. These libraries are prone to code execution vulnerabilities. Ensure user data does not enter this function. To fix this, try to avoid serializing whole objects. Consider instead using a serializer such as JSON."
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead."
              },
              "helpUri": "https://semgrep.dev/r/python.pycryptodome.security.insecure-hash-algorithm.insecure-hash-algorithm-md5",
              "id": "python.pycryptodome.security.insecure-hash-algorithm.insecure-hash-algorithm-md5",
              "name": "python.pycryptodome.security.insecure-hash-algorithm.insecure-hash-algorithm-md5",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
                  "OWASP-A3: Sensitive Data Exposure"
                ]
              },
              "shortDescription": {
                "text": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead."
              }
            },
            {
              "defaultConfiguration": { "level": "error" },
              "fullDescription": {
                "text": "'$VAR' is using the empty string as its default and is being used to set the password on '$MODEL'. If you meant to set an unusable password, set the default value to 'None' or call 'set_unusable_password()'."
              },
              "helpUri": "https://semgrep.dev/r/python.django.security.passwords.use-none-for-password-default.use-none-for-password-default",
              "id": "python.django.security.passwords.use-none-for-password-default.use-none-for-password-default",
              "name": "python.django.security.passwords.use-none-for-password-default.use-none-for-password-default",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-521: Weak Password Requirements",
                  "OWASP-A2: Broken Authentication"
                ]
              },
              "shortDescription": {
                "text": "'$VAR' is using the empty string as its default and is being used to set the password on '$MODEL'. If you meant to set an unusable password, set the default value to 'None' or call 'set_unusable_password()'."
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "Found extension of custom expression: $CLASS. Extending expressions in this way could inadvertently expose a SQL injection vulnerability. See https://docs.djangoproject.com/en/3.0/ref/models/expressions/#avoiding-sql-injection for more information."
              },
              "helpUri": "https://semgrep.dev/r/python.django.security.audit.extends-custom-expression.extends-custom-expression",
              "id": "python.django.security.audit.extends-custom-expression.extends-custom-expression",
              "name": "python.django.security.audit.extends-custom-expression.extends-custom-expression",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')",
                  "OWASP-A1: Injection"
                ]
              },
              "shortDescription": {
                "text": "Found extension of custom expression: $CLASS. Extending expressions in this way could inadvertently expose a SQL injection vulnerability. See https://docs.djangoproject.com/en/3.0/ref/models/expressions/#avoiding-sql-injection for more information."
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "Detected a template variable where autoescaping is explicitly disabled with '| safeseq' filter. This allows rendering of raw HTML in this segment. Ensure no user data is rendered here, otherwise this is a cross-site scripting (XSS) vulnerability. If you must do this, use `mark_safe` in your Python code."
              },
              "helpUri": "https://semgrep.dev/r/python.django.security.audit.xss.template-var-unescaped-with-safeseq.template-var-unescaped-with-safeseq",
              "id": "python.django.security.audit.xss.template-var-unescaped-with-safeseq.template-var-unescaped-with-safeseq",
              "name": "python.django.security.audit.xss.template-var-unescaped-with-safeseq.template-var-unescaped-with-safeseq",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
                  "OWASP-A7: Cross-Site Scripting (XSS)"
                ]
              },
              "shortDescription": {
                "text": "Detected a template variable where autoescaping is explicitly disabled with '| safeseq' filter. This allows rendering of raw HTML in this segment. Ensure no user data is rendered here, otherwise this is a cross-site scripting (XSS) vulnerability. If you must do this, use `mark_safe` in your Python code."
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.deserialization.pickle.avoid-pickle",
              "id": "python.lang.security.deserialization.pickle.avoid-pickle",
              "name": "python.lang.security.deserialization.pickle.avoid-pickle",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-502: Deserialization of Untrusted Data",
                  "OWASP-A8: Insecure Deserialization"
                ]
              },
              "shortDescription": {
                "text": "Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the relevant data as JSON or a similar text-based serialization format."
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "Use of 'ondoctype' in 'sax' library detected. By default, 'sax' won't do anything with custom DTD entity definitions. If you're implementing a custom DTD entity definition, be sure not to introduce XML External Entity (XXE) vulnerabilities, or be absolutely sure that external entities received from a trusted source while processing XML."
              },
              "helpUri": "https://semgrep.dev/r/javascript.sax.security.audit.sax-xxe.sax-xxe",
              "id": "javascript.sax.security.audit.sax-xxe.sax-xxe",
              "name": "javascript.sax.security.audit.sax-xxe.sax-xxe",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-611: Improper Restriction of XML External Entity Reference",
                  "OWASP-A4: XML External Entities (XXE)"
                ]
              },
              "shortDescription": {
                "text": "Use of 'ondoctype' in 'sax' library detected. By default, 'sax' won't do anything with custom DTD entity definitions. If you're implementing a custom DTD entity definition, be sure not to introduce XML External Entity (XXE) vulnerabilities, or be absolutely sure that external entities received from a trusted source while processing XML."
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "Data from request is passed to a file name `$FILE`. This is a path traversal vulnerability: https://owasp.org/www-community/attacks/Path_Traversal To mitigate, consider using os.path.abspath or os.path.realpath or Path library."
              },
              "helpUri": "https://semgrep.dev/r/python.django.security.injection.path-traversal.path-traversal-file-name.path-traversal-file-name",
              "id": "python.django.security.injection.path-traversal.path-traversal-file-name.path-traversal-file-name",
              "name": "python.django.security.injection.path-traversal.path-traversal-file-name.path-traversal-file-name",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')",
                  "OWASP-A1: Injection"
                ]
              },
              "shortDescription": {
                "text": "Data from request is passed to a file name `$FILE`. This is a path traversal vulnerability: https://owasp.org/www-community/attacks/Path_Traversal To mitigate, consider using os.path.abspath or os.path.realpath or Path library."
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "Detected the use of require(variable). Calling require with a non-literal argument might allow an attacker to load an run arbitrary code, or access arbitrary files."
              },
              "helpUri": "https://semgrep.dev/r/javascript.lang.security.detect-non-literal-require.detect-non-literal-require",
              "id": "javascript.lang.security.detect-non-literal-require.detect-non-literal-require",
              "name": "javascript.lang.security.detect-non-literal-require.detect-non-literal-require",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')",
                  "OWASP-A1: Injection"
                ]
              },
              "shortDescription": {
                "text": "Detected the use of require(variable). Calling require with a non-literal argument might allow an attacker to load an run arbitrary code, or access arbitrary files."
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.exec-detected.exec-detected",
              "id": "python.lang.security.audit.exec-detected.exec-detected",
              "name": "python.lang.security.audit.exec-detected.exec-detected",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')",
                  "OWASP-A1: Injection"
                ]
              },
              "shortDescription": {
                "text": "Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "Unverified SSL context detected. This will permit insecure connections without verifying SSL certificates. Use 'ssl.create_default_context()' instead."
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.paramiko.paramiko-exec-command.paramiko-exec-command",
              "id": "python.lang.security.audit.paramiko.paramiko-exec-command.paramiko-exec-command",
              "name": "python.lang.security.audit.paramiko.paramiko-exec-command.paramiko-exec-command",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
                  "OWASP-A1: Injection"
                ]
              },
              "shortDescription": {
                "text": "Unverified SSL context detected. This will permit insecure connections without verifying SSL certificates. Use 'ssl.create_default_context()' instead."
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "'mark_safe()' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML for rendering instead."
              },
              "helpUri": "https://semgrep.dev/r/python.django.security.audit.avoid-mark-safe.avoid-mark-safe",
              "id": "python.django.security.audit.avoid-mark-safe.avoid-mark-safe",
              "name": "python.django.security.audit.avoid-mark-safe.avoid-mark-safe",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
                  "OWASP-A7: Cross-Site Scripting (XSS)"
                ]
              },
              "shortDescription": {
                "text": "'mark_safe()' is used to mark a string as \"safe\" for HTML output. This disables escaping and could therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML for rendering instead."
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "An insecure SSL version was detected. TLS versions 1.0, 1.1, and all SSL versions are considered weak encryption and are deprecated. Use 'ssl.PROTOCOL_TLSv1_2' or higher."
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.weak-ssl-version.weak-ssl-version",
              "id": "python.lang.security.audit.weak-ssl-version.weak-ssl-version",
              "name": "python.lang.security.audit.weak-ssl-version.weak-ssl-version",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-326: Inadequate Encryption Strength",
                  "OWASP-A3: Sensitive Data Exposure"
                ]
              },
              "shortDescription": {
                "text": "An insecure SSL version was detected. TLS versions 1.0, 1.1, and all SSL versions are considered weak encryption and are deprecated. Use 'ssl.PROTOCOL_TLSv1_2' or higher."
              }
            },
            {
              "defaultConfiguration": { "level": "error" },
              "fullDescription": {
                "text": "Unverified SSL context detected. This will permit insecure connections without verifying SSL certificates. Use 'ssl.create_default_context()' instead."
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.unverified-ssl-context.unverified-ssl-context",
              "id": "python.lang.security.unverified-ssl-context.unverified-ssl-context",
              "name": "python.lang.security.unverified-ssl-context.unverified-ssl-context",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-295: Improper Certificate Validation",
                  "OWASP-A6: Security Misconfiguration"
                ]
              },
              "shortDescription": {
                "text": "Unverified SSL context detected. This will permit insecure connections without verifying SSL certificates. Use 'ssl.create_default_context()' instead."
              }
            },
            {
              "defaultConfiguration": { "level": "note" },
              "fullDescription": {
                "text": "Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text."
              },
              "helpUri": "https://semgrep.dev/r/python.django.security.audit.xss.template-translate-as-no-escape.template-translate-as-no-escape",
              "id": "python.django.security.audit.xss.template-translate-as-no-escape.template-translate-as-no-escape",
              "name": "python.django.security.audit.xss.template-translate-as-no-escape.template-translate-as-no-escape",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
                  "OWASP-A7: Cross-Site Scripting (XSS)"
                ]
              },
              "shortDescription": {
                "text": "Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text."
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "Detected Blowfish cipher algorithm which is considered insecure. The algorithm has many known vulnerabilities. Use AES instead."
              },
              "helpUri": "https://semgrep.dev/r/python.pycryptodome.security.insecure-cipher-algorithm.insecure-cipher-algorithm-blowfish",
              "id": "python.pycryptodome.security.insecure-cipher-algorithm.insecure-cipher-algorithm-blowfish",
              "name": "python.pycryptodome.security.insecure-cipher-algorithm.insecure-cipher-algorithm-blowfish",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
                  "OWASP-A3: Sensitive Data Exposure"
                ]
              },
              "shortDescription": {
                "text": "Detected Blowfish cipher algorithm which is considered insecure. The algorithm has many known vulnerabilities. Use AES instead."
              }
            },
            {
              "defaultConfiguration": { "level": "error" },
              "fullDescription": {
                "text": "Detected user data flowing into exec. This is code injection and should be avoided."
              },
              "helpUri": "https://semgrep.dev/r/python.flask.security.injection.user-exec.exec-injection",
              "id": "python.flask.security.injection.user-exec.exec-injection",
              "name": "python.flask.security.injection.user-exec.exec-injection",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')",
                  "OWASP-A1: Injection"
                ]
              },
              "shortDescription": {
                "text": "Detected user data flowing into exec. This is code injection and should be avoided."
              }
            },
            {
              "defaultConfiguration": { "level": "error" },
              "fullDescription": {
                "text": "Detected use of xmlrpc. xmlrpc is not inherently safe from vulnerabilities. Use defusedxml.xmlrpc instead."
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.use-defused-xmlrpc.use-defused-xmlrpc",
              "id": "python.lang.security.use-defused-xmlrpc.use-defused-xmlrpc",
              "name": "python.lang.security.use-defused-xmlrpc.use-defused-xmlrpc",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-776: Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion')",
                  "OWASP-A4: XML External Entities (XXE)"
                ]
              },
              "shortDescription": {
                "text": "Detected use of xmlrpc. xmlrpc is not inherently safe from vulnerabilities. Use defusedxml.xmlrpc instead."
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "Found request data as an index to 'globals()'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'."
              },
              "helpUri": "https://semgrep.dev/r/python.django.security.injection.code.globals-misuse-code-execution.globals-misuse-code-execution",
              "id": "python.django.security.injection.code.globals-misuse-code-execution.globals-misuse-code-execution",
              "name": "python.django.security.injection.code.globals-misuse-code-execution.globals-misuse-code-execution",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-96: Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')",
                  "OWASP-A1: Injection"
                ]
              },
              "shortDescription": {
                "text": "Found request data as an index to 'globals()'. This is extremely dangerous because it allows an attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'."
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "Telnet does not encrypt communications. Use SSH instead."
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.telnetlib.telnetlib",
              "id": "python.lang.security.audit.telnetlib.telnetlib",
              "name": "python.lang.security.audit.telnetlib.telnetlib",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-319: Cleartext Transmission of Sensitive Information",
                  "OWASP-A3: Sensitive Data Exposure"
                ]
              },
              "shortDescription": {
                "text": "Telnet does not encrypt communications. Use SSH instead."
              }
            },
            {
              "defaultConfiguration": { "level": "note" },
              "fullDescription": {
                "text": "Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text."
              },
              "helpUri": "https://semgrep.dev/r/python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape",
              "id": "python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape",
              "name": "python.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
                  "OWASP-A7: Cross-Site Scripting (XSS)"
                ]
              },
              "shortDescription": {
                "text": "Translated strings will not be escaped when rendered in a template. This leads to a vulnerability where translators could include malicious script tags in their translations. Consider using `force_escape` to explicitly escape a translated text."
              }
            },
            {
              "defaultConfiguration": { "level": "error" },
              "fullDescription": {
                "text": "Found use of the native Python XML libraries, which is vulnerable to XML external entity (XXE) attacks. The Python documentation recommends the 'defusedxml' library instead. Use 'defusedxml'. See https://github.com/tiran/defusedxml for more information."
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.use-defused-xml.use-defused-xml",
              "id": "python.lang.security.use-defused-xml.use-defused-xml",
              "name": "python.lang.security.use-defused-xml.use-defused-xml",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-611: Improper Restriction of XML External Entity Reference",
                  "OWASP-A4: XML External Entities (XXE)"
                ]
              },
              "shortDescription": {
                "text": "Found use of the native Python XML libraries, which is vulnerable to XML external entity (XXE) attacks. The Python documentation recommends the 'defusedxml' library instead. Use 'defusedxml'. See https://github.com/tiran/defusedxml for more information."
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "Found user data in a call to 'eval'. This is extremely dangerous because it can enable an attacker to execute remote code. See https://owasp.org/www-community/attacks/Code_Injection for more information"
              },
              "helpUri": "https://semgrep.dev/r/python.django.security.injection.code.user-eval.user-eval",
              "id": "python.django.security.injection.code.user-eval.user-eval",
              "name": "python.django.security.injection.code.user-eval.user-eval",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')",
                  "OWASP-A1: Injection"
                ]
              },
              "shortDescription": {
                "text": "Found user data in a call to 'eval'. This is extremely dangerous because it can enable an attacker to execute remote code. See https://owasp.org/www-community/attacks/Code_Injection for more information"
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "Detected RC4 cipher algorithm which is considered insecure. The algorithm has many known vulnerabilities. Use AES instead."
              },
              "helpUri": "https://semgrep.dev/r/python.cryptography.security.insecure-cipher-algorithms.insecure-cipher-algorithm-rc4",
              "id": "python.cryptography.security.insecure-cipher-algorithms.insecure-cipher-algorithm-rc4",
              "name": "python.cryptography.security.insecure-cipher-algorithms.insecure-cipher-algorithm-rc4",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
                  "OWASP-A3: Sensitive Data Exposure"
                ]
              },
              "shortDescription": {
                "text": "Detected RC4 cipher algorithm which is considered insecure. The algorithm has many known vulnerabilities. Use AES instead."
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "Detected a Jinja2 environment without autoescaping. Jinja2 does not autoescape by default. This is dangerous if you are rendering to a browser because this allows for cross-site scripting (XSS) attacks. If you are in a web context, enable autoescaping by setting 'autoescape=True.' You may also consider using 'jinja2.select_autoescape()' to only enable automatic escaping for certain file extensions."
              },
              "helpUri": "https://semgrep.dev/r/python.jinja2.security.audit.autoescape-disabled.autoescape-disabled",
              "id": "python.jinja2.security.audit.autoescape-disabled.autoescape-disabled",
              "name": "python.jinja2.security.audit.autoescape-disabled.autoescape-disabled",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-116: Improper Encoding or Escaping of Output",
                  "OWASP-A6: Security Misconfiguration"
                ]
              },
              "shortDescription": {
                "text": "Detected a Jinja2 environment without autoescaping. Jinja2 does not autoescape by default. This is dangerous if you are rendering to a browser because this allows for cross-site scripting (XSS) attacks. If you are in a web context, enable autoescaping by setting 'autoescape=True.' You may also consider using 'jinja2.select_autoescape()' to only enable automatic escaping for certain file extensions."
              }
            },
            {
              "defaultConfiguration": { "level": "error" },
              "fullDescription": {
                "text": "Avoid using `load()`. `PyYAML.load` can create arbitrary Python objects. A malicious actor could exploit this to run arbitrary code. Use `safe_load()` instead."
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.deserialization.avoid-pyyaml-load.avoid-pyyaml-load",
              "id": "python.lang.security.deserialization.avoid-pyyaml-load.avoid-pyyaml-load",
              "name": "python.lang.security.deserialization.avoid-pyyaml-load.avoid-pyyaml-load",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-502: Deserialization of Untrusted Data",
                  "OWASP-A8: Insecure Deserialization"
                ]
              },
              "shortDescription": {
                "text": "Avoid using `load()`. `PyYAML.load` can create arbitrary Python objects. A malicious actor could exploit this to run arbitrary code. Use `safe_load()` instead."
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "Detected an insufficient curve size for EC. NIST recommends a key size of 224 or higher. For example, use 'ec.SECP256R1'."
              },
              "helpUri": "https://semgrep.dev/r/python.cryptography.security.insufficient-ec-key-size.insufficient-ec-key-size",
              "id": "python.cryptography.security.insufficient-ec-key-size.insufficient-ec-key-size",
              "name": "python.cryptography.security.insufficient-ec-key-size.insufficient-ec-key-size",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-326: Inadequate Encryption Strength",
                  "OWASP-A3: Sensitive Data Exposure"
                ]
              },
              "shortDescription": {
                "text": "Detected an insufficient curve size for EC. NIST recommends a key size of 224 or higher. For example, use 'ec.SECP256R1'."
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.eval-detected.eval-detected",
              "id": "python.lang.security.audit.eval-detected.eval-detected",
              "name": "python.lang.security.audit.eval-detected.eval-detected",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')",
                  "OWASP-A1: Injection"
                ]
              },
              "shortDescription": {
                "text": "Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this content can be input from outside the program, this may be a code injection vulnerability. Ensure evaluated content is not definable by external sources."
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "The HTTPSConnection API has changed frequently with minor releases of Python. Ensure you are using the API for your version of Python securely. For example, Python 3 versions prior to 3.4.3 will not verify SSL certificates by default. See https://docs.python.org/3/library/http.client.html#http.client.HTTPSConnection for more information."
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.httpsconnection-detected.httpsconnection-detected",
              "id": "python.lang.security.audit.httpsconnection-detected.httpsconnection-detected",
              "name": "python.lang.security.audit.httpsconnection-detected.httpsconnection-detected",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-295: Improper Certificate Validation",
                  "OWASP-A6: Security Misconfiguration"
                ]
              },
              "shortDescription": {
                "text": "The HTTPSConnection API has changed frequently with minor releases of Python. Ensure you are using the API for your version of Python securely. For example, Python 3 versions prior to 3.4.3 will not verify SSL certificates by default. See https://docs.python.org/3/library/http.client.html#http.client.HTTPSConnection for more information."
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead."
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-md5",
              "id": "python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-md5",
              "name": "python.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-md5",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
                  "OWASP-A3: Sensitive Data Exposure"
                ]
              },
              "shortDescription": {
                "text": "Detected MD5 hash algorithm which is considered insecure. MD5 is not collision resistant and is therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead."
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "Overwriting `transformLinkUri` or `transformImageUri` to something insecure or turning `allowDangerousHtml` on, will open code up to XSS vectors."
              },
              "helpUri": "https://semgrep.dev/r/typescript.react.security.react-markdown-insecure-html.react-markdown-insecure-html",
              "id": "typescript.react.security.react-markdown-insecure-html.react-markdown-insecure-html",
              "name": "typescript.react.security.react-markdown-insecure-html.react-markdown-insecure-html",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
                  "OWASP-A7: Cross-Site Scripting (XSS)"
                ]
              },
              "shortDescription": {
                "text": "Overwriting `transformLinkUri` or `transformImageUri` to something insecure or turning `allowDangerousHtml` on, will open code up to XSS vectors."
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "Detected Blowfish cipher algorithm which is considered insecure. The algorithm has many known vulnerabilities. Use AES instead."
              },
              "helpUri": "https://semgrep.dev/r/python.cryptography.security.insecure-cipher-algorithms.insecure-cipher-algorithm-blowfish",
              "id": "python.cryptography.security.insecure-cipher-algorithms.insecure-cipher-algorithm-blowfish",
              "name": "python.cryptography.security.insecure-cipher-algorithms.insecure-cipher-algorithm-blowfish",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-327: Use of a Broken or Risky Cryptographic Algorithm",
                  "OWASP-A3: Sensitive Data Exposure"
                ]
              },
              "shortDescription": {
                "text": "Detected Blowfish cipher algorithm which is considered insecure. The algorithm has many known vulnerabilities. Use AES instead."
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "Detected a template block where autoescaping is explicitly disabled with '{% autoescape off %}'. This allows rendering of raw HTML in this segment. Turn autoescaping on to prevent cross-site scripting (XSS). If you must do this, consider instead, using `mark_safe` in Python code."
              },
              "helpUri": "https://semgrep.dev/r/python.django.security.audit.xss.template-autoescape-off.template-autoescape-off",
              "id": "python.django.security.audit.xss.template-autoescape-off.template-autoescape-off",
              "name": "python.django.security.audit.xss.template-autoescape-off.template-autoescape-off",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
                  "OWASP-A7: Cross-Site Scripting (XSS)"
                ]
              },
              "shortDescription": {
                "text": "Detected a template block where autoescaping is explicitly disabled with '{% autoescape off %}'. This allows rendering of raw HTML in this segment. Turn autoescaping on to prevent cross-site scripting (XSS). If you must do this, consider instead, using `mark_safe` in Python code."
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "Detected use of the wildcard character in a system call that spawns a shell. This subjects the wildcard to normal shell expansion, which can have unintended consequences if there exist any non-standard file names. Consider a file named '-e sh script.sh' -- this will execute a script when 'rsync' is called. See https://www.defensecode.com/public/DefenseCode_Unix_WildCards_Gone_Wild.txt for more information."
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.system-wildcard-detected.system-wildcard-detected",
              "id": "python.lang.security.audit.system-wildcard-detected.system-wildcard-detected",
              "name": "python.lang.security.audit.system-wildcard-detected.system-wildcard-detected",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-155: Improper Neutralization of Wildcards or Matching Symbols",
                  "OWASP-A1: Injection"
                ]
              },
              "shortDescription": {
                "text": "Detected use of the wildcard character in a system call that spawns a shell. This subjects the wildcard to normal shell expansion, which can have unintended consequences if there exist any non-standard file names. Consider a file named '-e sh script.sh' -- this will execute a script when 'rsync' is called. See https://www.defensecode.com/public/DefenseCode_Unix_WildCards_Gone_Wild.txt for more information."
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "Detected a segment of a Flask template where autoescaping is explicitly disabled with '{% autoescape off %}'. This allows rendering of raw HTML in this segment. Ensure no user data is rendered here, otherwise this is a cross-site scripting (XSS) vulnerability, or turn autoescape on."
              },
              "helpUri": "https://semgrep.dev/r/python.flask.security.xss.audit.template-autoescape-off.template-autoescape-off",
              "id": "python.flask.security.xss.audit.template-autoescape-off.template-autoescape-off",
              "name": "python.flask.security.xss.audit.template-autoescape-off.template-autoescape-off",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
                  "OWASP-A7: Cross-Site Scripting (XSS)"
                ]
              },
              "shortDescription": {
                "text": "Detected a segment of a Flask template where autoescaping is explicitly disabled with '{% autoescape off %}'. This allows rendering of raw HTML in this segment. Ensure no user data is rendered here, otherwise this is a cross-site scripting (XSS) vulnerability, or turn autoescape on."
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "Detected usage of noassert in Buffer API, which allows the offset the be beyond the end of the buffer. This could result in writing or reading beyond the end of the buffer."
              },
              "helpUri": "https://semgrep.dev/r/javascript.lang.security.detect-buffer-noassert.detect-buffer-noassert",
              "id": "javascript.lang.security.detect-buffer-noassert.detect-buffer-noassert",
              "name": "javascript.lang.security.detect-buffer-noassert.detect-buffer-noassert",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer"
                ]
              },
              "shortDescription": {
                "text": "Detected usage of noassert in Buffer API, which allows the offset the be beyond the end of the buffer. This could result in writing or reading beyond the end of the buffer."
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "'ssl.wrap_socket()' is deprecated. This function creates an insecure socket without server name indication or hostname matching. Instead, create an SSL context using 'ssl.SSLContext()' and use that to wrap a socket."
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.ssl-wrap-socket-is-deprecated.ssl-wrap-socket-is-deprecated",
              "id": "python.lang.security.audit.ssl-wrap-socket-is-deprecated.ssl-wrap-socket-is-deprecated",
              "name": "python.lang.security.audit.ssl-wrap-socket-is-deprecated.ssl-wrap-socket-is-deprecated",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-326: Inadequate Encryption Strength",
                  "OWASP-A3: Sensitive Data Exposure"
                ]
              },
              "shortDescription": {
                "text": "'ssl.wrap_socket()' is deprecated. This function creates an insecure socket without server name indication or hostname matching. Instead, create an SSL context using 'ssl.SSLContext()' and use that to wrap a socket."
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.dangerous-system-call.dangerous-system-call",
              "id": "python.lang.security.audit.dangerous-system-call.dangerous-system-call",
              "name": "python.lang.security.audit.dangerous-system-call.dangerous-system-call",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')",
                  "OWASP-A1: Injection"
                ]
              },
              "shortDescription": {
                "text": "Found dynamic content used in a system call. This is dangerous if external data can reach this function call because it allows a malicious actor to execute commands. Use the 'subprocess' module instead, which is easier to use without accidentally exposing a command injection vulnerability."
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "Django cookies should be handled securely by setting secure=True, httponly=True, and samesite='Lax' in response.set_cookie(...). If your situation calls for different settings, explicitly disable the setting. If you want to send the cookie over http, set secure=False.  If you want to let client-side JavaScript read the cookie, set httponly=False. If you want to attach cookies to requests for external sites, set samesite=None."
              },
              "helpUri": "https://semgrep.dev/r/python.django.security.audit.secure-cookies.django-secure-set-cookie",
              "id": "python.django.security.audit.secure-cookies.django-secure-set-cookie",
              "name": "python.django.security.audit.secure-cookies.django-secure-set-cookie",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-614: Sensitive Cookie in HTTPS Session Without 'Secure' Attribute",
                  "OWASP-A3: Sensitive Data Exposure"
                ]
              },
              "shortDescription": {
                "text": "Django cookies should be handled securely by setting secure=True, httponly=True, and samesite='Lax' in response.set_cookie(...). If your situation calls for different settings, explicitly disable the setting. If you want to send the cookie over http, set secure=False.  If you want to let client-side JavaScript read the cookie, set httponly=False. If you want to attach cookies to requests for external sites, set samesite=None."
              }
            },
            {
              "defaultConfiguration": { "level": "warning" },
              "fullDescription": {
                "text": "Because portions of the logging configuration are passed through eval(), use of this function may open its users to a security risk. While the function only binds to a socket on localhost, and so does not accept connections from remote machines, there are scenarios where untrusted code could be run under the account of the process which calls listen(). See more details at https://docs.python.org/3/library/logging.config.html?highlight=security#logging.config.listen"
              },
              "helpUri": "https://semgrep.dev/r/python.lang.security.audit.logging.listeneval.listen-eval",
              "id": "python.lang.security.audit.logging.listeneval.listen-eval",
              "name": "python.lang.security.audit.logging.listeneval.listen-eval",
              "properties": {
                "precision": "very-high",
                "tags": [
                  "CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')",
                  "OWASP-A6: Security Misconfiguration"
                ]
              },
              "shortDescription": {
                "text": "Because portions of the logging configuration are passed through eval(), use of this function may open its users to a security risk. While the function only binds to a socket on localhost, and so does not accept connections from remote machines, there are scenarios where untrusted code could be run under the account of the process which calls listen(). See more details at https://docs.python.org/3/library/logging.config.html?highlight=security#logging.config.listen"
              }
            }
          ],
          "semanticVersion": "0.75.0"
        }
      }
    }
  ],
  "version": "2.1.0"
}
